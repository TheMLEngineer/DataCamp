


 Q : 



Comparing neural network models to classical regression models
Which of the models in the diagrams has greater ability to account for interactions?


(Image URL : https://s3.amazonaws.com/assets.datacamp.com/production/course_3524/datasets/ch1ex2.png)




 A : 



Model 2.


Correct! Model 2 has more nodes in the hidden layer, and therefore, greater ability to capture interactions.



---------------------------------------------------------------------------------------------------------------------------------------------------------------------




 Ref : 
 
 
 
 Coding the forward propagation algorithm
In this exercise, you'll write code to do forward propagation (prediction) for your first neural network:

Image URL : https://s3.amazonaws.com/assets.datacamp.com/production/course_3524/datasets/1_4.png

Each data point is a customer. The first input is how many accounts they have, and the second input is how many children they have. The model will predict how many transactions the user makes in the next year. You will use this data throughout the first 2 chapters of this course.

The input data has been pre-loaded as input_data, and the weights are available in a dictionary called weights. The array of weights for the first node in the hidden layer are in weights['node_0'], and the array of weights for the second node in the hidden layer are in weights['node_1'].

The weights feeding into the output node are available in weights['output'].

NumPy will be pre-imported for you as np in all exercises.



 Q : 
 
 
 Calculate the value in node 0 by multiplying input_data by its weights weights['node_0'] and computing their sum. This is the 1st node in the hidden layer.
Calculate the value in node 1 using input_data and weights['node_1']. This is the 2nd node in the hidden layer.
Put the hidden layer values into an array. This has been done for you.
Generate the prediction by multiplying hidden_layer_outputs by weights['output'] and computing their sum.
Hit 'Submit Answer' to print the output!




# Calculate node 0 value: node_0_value
node_0_value = (input_data * weights['node_0']).sum()

# Calculate node 1 value: node_1_value
node_1_value = (input_data * weights['node_1']).sum()

# Put node values into array: hidden_layer_outputs
hidden_layer_outputs = np.array([node_0_value, node_1_value])

# Calculate output: output
output = (hidden_layer_outputs * weights['output']).sum()

# Print output
print(output)




<script.py> output:
    -39
	
	

Wonderful work! It looks like the network generated a prediction of -39.



---------------------------------------------------------------------------------------------------------------------------------------------------------------------



 Ref : 
 
 The Rectified Linear Activation Function
As Dan explained to you in the video, an "activation function" is a function applied at each node. It converts the node's input into some output.

The rectified linear activation function (called ReLU) has been shown to lead to very high-performance networks. This function takes a single number as an input, returning 0 if the input is negative, and the input if the input is positive.

Here are some examples:
relu(3) = 3 
relu(-3) = 0 


 Q : 
 
 
 Fill in the definition of the relu() function:
Use the max() function to calculate the value for the output of relu().
Apply the relu() function to node_0_input to calculate node_0_output.
Apply the relu() function to node_1_input to calculate node_1_output.





def relu(input):
    '''Define your relu activation function here'''
    # Calculate the value for the output of the relu function: output
    output = max(input, 0)
    
    # Return the value just calculated
    return(output)

# Calculate node 0 value: node_0_output
node_0_input = (input_data * weights['node_0']).sum()
node_0_output = relu(node_0_input)

# Calculate node 1 value: node_1_output
node_1_input = (input_data * weights['node_1']).sum()
node_1_output = relu(node_1_input)

# Put node values into array: hidden_layer_outputs
hidden_layer_outputs = np.array([node_0_output, node_1_output])

# Calculate model output (do not apply relu)
model_output = (hidden_layer_outputs * weights['output']).sum()

# Print model output
print(model_output)



<script.py> output:
    52




Great work! You predicted 52 transactions. Without this activation function, you would have predicted a negative number! The real power of activation functions will come soon when you start tuning model weights.




---------------------------------------------------------------------------------------------------------------------------------------------------------------------



 Ref : 
 
 
 
 Applying the network to many observations/rows of data
You'll now define a function called predict_with_network() which will generate predictions for multiple data observations, which are pre-loaded as input_data. As before, weights are also pre-loaded. In addition, the relu() function you defined in the previous exercise has been pre-loaded.




 Q : 
 
 
 Define a function called predict_with_network() that accepts two arguments - input_data_row and weights - and returns a prediction from the network as the output.
Calculate the input and output values for each node, storing them as: node_0_input, node_0_output, node_1_input, and node_1_output.
To calculate the input value of a node, multiply the relevant arrays together and compute their sum.
To calculate the output value of a node, apply the relu() function to the input value of the node.
Calculate the model output by calculating input_to_final_layer and model_output in the same ay you calculated the input and output values for the nodes.
Use a for loop to iterate over input_data:
Use your predict_with_network() to generate predictions for each row of the input_data - input_data_row. Append each prediction to results.



# Define predict_with_network()
def predict_with_network(input_data_row, weights):

    # Calculate node 0 value
    node_0_input = (input_data_row * weights['node_0']).sum()
    node_0_output = relu(node_0_input)

    # Calculate node 1 value
    node_1_input = (input_data_row * weights['node_1']).sum()
    node_1_output = relu(node_1_input)

    # Put node values into array: hidden_layer_outputs
    hidden_layer_outputs = np.array([node_0_output, node_1_output])
    
    # Calculate model output
    input_to_final_layer = (hidden_layer_outputs * weights['output']).sum()
    model_output = relu(input_to_final_layer)
    
    # Return model output
    return(model_output)


# Create empty list to store prediction results
results = []
for input_data_row in input_data:
    # Append prediction to results
    results.append(predict_with_network(input_data_row, weights))

# Print results
print(results)
        
		
		
		
		
		
		
<script.py> output:
    [52, 63, 0, 148]
	
	




---------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Q : 
 
 
 Forward propagation in a deeper network
You now have a model with 2 hidden layers. The values for an input data point are shown inside the input nodes. The weights are shown on the edges/lines. What prediction would this model make on this data point?

Assume the activation function at each node is the identity function. That is, each node's output will be the same as its input. So the value of the bottom node in the first hidden layer is -1, and not 0, as it would be if the ReLU activation function was used.


Image URL : https://s3.amazonaws.com/assets.datacamp.com/production/course_3524/datasets/ch1ex9.png


 A : 0.



---------------------------------------------------------------------------------------------------------------------------------------------------------------------



 Ref : 
 
 
 Multi-layer neural networks
In this exercise, you'll write code to do forward propagation for a neural network with 2 hidden layers. Each hidden layer has two nodes. The input data has been preloaded as input_data. The nodes in the first hidden layer are called node_0_0 and node_0_1. Their weights are pre-loaded as weights['node_0_0'] and weights['node_0_1'] respectively.

The nodes in the second hidden layer are called node_1_0 and node_1_1. Their weights are pre-loaded as weights['node_1_0'] and weights['node_1_1'] respectively.

We then create a model output from the hidden nodes using weights pre-loaded as weights['output'].



Image URL : https://s3.amazonaws.com/assets.datacamp.com/production/course_3524/datasets/ch1ex10.png



 Q : 
 
 
 Calculate node_0_0_input using its weights weights['node_0_0'] and the given input_data. Then apply the relu() function to get node_0_0_output.
Do the same as above for node_0_1_input to get node_0_1_output.
Calculate node_1_0_input using its weights weights['node_1_0'] and the outputs from the first hidden layer - hidden_0_outputs. Then apply the relu() function to get node_1_0_output.
Do the same as above for node_1_1_input to get node_1_1_output.
Calculate model_output using its weights weights['output'] and the outputs from the second hidden layer hidden_1_outputs array. Do not apply the relu() function to this output.




def predict_with_network(input_data):
    # Calculate node 0 in the first hidden layer
    node_0_0_input = (input_data * weights['node_0_0']).sum()
    node_0_0_output = relu(node_0_0_input)

    # Calculate node 1 in the first hidden layer
    node_0_1_input = (input_data * weights['node_0_1']).sum()
    node_0_1_output = relu(node_0_1_input)

    # Put node values into array: hidden_0_outputs
    hidden_0_outputs = np.array([node_0_0_output, node_0_1_output])

    # Calculate node 0 in the second hidden layer
    node_1_0_input = (hidden_0_outputs * weights['node_1_0']).sum()
    node_1_0_output = relu(node_1_0_input)

    # Calculate node 1 in the second hidden layer
    node_1_1_input = (hidden_0_outputs * weights['node_1_1']).sum()
    node_1_1_output = relu(node_1_1_input)

    # Put node values into array: hidden_1_outputs
    hidden_1_outputs = np.array([node_1_0_output, node_1_1_output])
    
    # Calculate output here: model_output
    model_output = (hidden_1_outputs * weights['output']).sum()
    
    # Return model_output
    return(model_output)

output = predict_with_network(input_data)
print(output)




<script.py> output:
    182
	
(Hint : In 2nd layer use  hidden_0_outputs in the place of input_data)


Wonderful work! The network generated a prediction of 182.




---------------------------------------------------------------------------------------------------------------------------------------------------------------------



 Q : 
 
 
 
 Representations are learned
How are the weights that determine the features/interactions in Neural Networks created?


 A : 
 
 
 The model training process sets them to optimize predictive accuracy.
press



Exactly! You will learn more about how Neural Networks optimize their weights in the next chapter!



---------------------------------------------------------------------------------------------------------------------------------------------------------------------



 Q : 
 
 Levels of representation
Which layers of a model capture more complex or "higher level" interactions?




 A : 
 
 
 
 The last layers capture the most complex interactions.
press




Exactly! The last layers capture the most complex interactions.



---------------------------------------------------------------------------------------------------------------------------------------------------------------------




 Q : 


Calculating model errors
For the exercises in this chapter, you'll continue working with the network to predict transactions for a bank.

What is the error (predicted - actual) for the following network when the input data is [3, 2] and the actual value of the target (what you are trying to predict) is 5? It may be helpful to get out a pen and piece of paper to calculate these values.



(Image URL : https://s3.amazonaws.com/assets.datacamp.com/production/course_3524/datasets/ch2_ex2_3.png)



 A : 


11.
press




Well done! The network generates a prediction of 16, which results in an error of 11.






---------------------------------------------------------------------------------------------------------------------------------------------------------------------




 Ref : 


Understanding how weights change model accuracy
Imagine you have to make a prediction for a single data point. The actual value of the target is 7. The weight going from node_0 to the output is 2, as shown below. If you increased it slightly, changing it to 2.01, would the predictions become more accurate, less accurate, or stay the same?




(Image URl : https://s3.amazonaws.com/assets.datacamp.com/production/course_3524/datasets/ch2_ex2_3.png )


 A : 


Less accurate.
press




Exactly! Increasing the weight to 2.01 would increase the resulting error from 9 to 9.08, making the predictions less accurate.





---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 


Coding how weight changes affect accuracy
Now you'll get to change weights in a real network and see how they affect model accuracy!

Have a look at the following neural network: 

(image URL : https://s3.amazonaws.com/assets.datacamp.com/production/course_3524/datasets/ch2ex4.png)

Its weights have been pre-loaded as weights_0. Your task in this exercise is to update a single weight in weights_0 to create weights_1, which gives a perfect prediction (in which the predicted value is equal to target_actual: 3).

Use a pen and paper if necessary to experiment with different combinations. You'll use the predict_with_network() function, which takes an array of data as the first argument, and weights as the second argument.





 Q : 


Create a dictionary of weights called weights_1 where you have changed 1 weight from weights_0 (You only need to make 1 edit to weights_0 to generate the perfect prediction).
Obtain predictions with the new weights using the predict_with_network() function with input_data and weights_1.
Calculate the error for the new weights by subtracting target_actual from model_output_1.
Hit 'Submit Answer' to see how the errors compare!





# The data point you will make a prediction for
input_data = np.array([0, 3])

# Sample weights
weights_0 = {'node_0': [2, 1],
             'node_1': [1, 2],
             'output': [1, 1]
            }

# The actual target value, used to calculate the error
target_actual = 3

# Make prediction using original weights
model_output_0 = predict_with_network(input_data, weights_0)

# Calculate error: error_0
error_0 = model_output_0 - target_actual

# Create weights that cause the network to make perfect prediction (3): weights_1
weights_1 = {'node_0': [2, 1],
             'node_1': [1, 2],
             'output': [1, 0]
            }

# Make prediction using new weights: model_output_1
model_output_1 = predict_with_network(input_data, weights_1)

# Calculate error: error_1
error_1 = model_output_1 - target_actual

# Print error_0 and error_1
print(error_0)
print(error_1)




<script.py> output:
    6
    0





Fantastic! The network now generates a perfect prediction with an error of 0.





---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 


Scaling up to multiple data points
You've seen how different weights will have different accuracies on a single prediction. But usually, you'll want to measure model accuracy on many points. You'll now write code to compare model accuracies for two different sets of weights, which have been stored as weights_0 and weights_1.

input_data is a list of arrays. Each item in that list contains the data to make a single prediction. target_actuals is a list of numbers. Each item in that list is the actual value we are trying to predict.

In this exercise, you'll use the mean_squared_error() function from sklearn.metrics. It takes the true values and the predicted values as arguments.

You'll also use the preloaded predict_with_network() function, which takes an array of data as the first argument, and weights as the second argument.





 Q : 


Import mean_squared_error from sklearn.metrics.
Using a for loop to iterate over each row of input_data:
Make predictions for each row with weights_0 using the predict_with_network() function and append it to model_output_0.
Do the same for weights_1, appending the predictions to model_output_1.
Calculate the mean squared error of model_output_0 and then model_output_1 using the mean_squared_error() function. The first argument should be the actual values (target_actuals), and the second argument should be the predicted values (model_output_0 or model_output_1).








from sklearn.metrics import mean_squared_error

# Create model_output_0 
model_output_0 = []
# Create model_output_1
model_output_1 = []

# Loop over input_data
for row in input_data:
    # Append prediction to model_output_0
    model_output_0.append(predict_with_network(row, weights_0))
    
    # Append prediction to model_output_1
    model_output_1.append(predict_with_network(row , weights_1))

# Calculate the mean squared error for model_output_0: mse_0
mse_0 = mean_squared_error(target_actuals , model_output_0)

# Calculate the mean squared error for model_output_1: mse_1
mse_1 = mean_squared_error(target_actuals , model_output_1)

# Print mse_0 and mse_1
print("Mean squared error with weights_0: %f" %mse_0)
print("Mean squared error with weights_1: %f" %mse_1)






<script.py> output:
    Mean squared error with weights_0: 37.500000
    Mean squared error with weights_1: 49.890625




Excellent work! It looks like model_output_1 has a higher mean squared error.






---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 


Calculating slopes
You're now going to practice calculating slopes. When plotting the mean-squared error loss function against predictions, the slope is 2 * x * (y-xb), or 2 * input_data * error. Note that x and b may have multiple numbers (x is a vector for each data point, and b is a vector). In this case, the output will also be a vector, which is exactly what you want.

You're ready to write the code to calculate this slope while using a single data point. You'll use pre-defined weights called weights as well as data for a single point called input_data. The actual value of the target you want to predict is stored in target.




 Q : 


Calculate the predictions, preds, by multiplying weights by the input_data and computing their sum.
Calculate the error, which is target minus preds. Notice that this error corresponds to y-xb in the gradient expression.
Calculate the slope of the loss function with respect to the prediction. To do this, you need to take the product of input_data and error and multiply that by 2.






# Calculate the predictions: preds
preds = (input_data * weights).sum()

# Calculate the error: error
error = target - preds

# Calculate the slope: slope
slope = input_data * error * 2

# Print the slope
print(slope)






<script.py> output:
    [-14 -28 -42]



Well done! You can now use this slope to improve the weights of the model!





---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 


Improving model weights
Hurray! You've just calculated the slopes you need. Now it's time to use those slopes to improve your model. If you add the slopes to your weights, you will move in the right direction. However, it's possible to move too far in that direction. So you will want to take a small step in that direction first, using a lower learning rate, and verify that the model is improving.

The weights have been pre-loaded as weights, the actual value of the target as target, and the input data as input_data. The predictions from the initial weights are stored as preds.





 Q : 


Set the learning rate to be 0.01 and calculate the error from the original predictions. This has been done for you.
Calculate the updated weights by subtracting the product of learning_rate and slope from weights.
Calculate the updated predictions by multiplying weights_updated with input_data and computing their sum.
Calculate the error for the new predictions. Store the result as error_updated.
Hit 'Submit Answer' to compare the updated error to the original!






# Set the learning rate: learning_rate
learning_rate = 0.01

# Calculate the predictions: preds
preds = (weights * input_data).sum()

# Calculate the error: error
error = preds - target

# Calculate the slope: slope
slope = 2 * input_data * error

# Update the weights: weights_updated
weights_updated =weights - (learning_rate * slope)

# Get updated predictions: preds_updated
preds_updated = (input_data * weights_updated).sum()

# Calculate updated error: error_updated
error_updated = np.abs(target -  preds_updated)

# Print the original error
print(error)

# Print the updated error
print(error_updated)







<script.py> output:
    7
    5.04




Fantastic! Updating the model weights did indeed decrease the error!






---------------------------------------------------------------------------------------------------------------------------------------------------------------------




 Ref : 


Making multiple updates to weights
You're now going to make multiple updates so you can dramatically improve your model weights, and see how the predictions improve with each update.

To keep your code clean, there is a pre-loaded get_slope() function that takes input_data, target, and weights as arguments. There is also a get_mse() function that takes the same arguments. The input_data, target, and weights have been pre-loaded.

This network does not have any hidden layers, and it goes directly from the input (with 3 nodes) to an output node. Note that weights is a single array.

We have also pre-loaded matplotlib.pyplot, and the error history will be plotted after you have done your gradient descent steps.





 Q : 


Using a for loop to iteratively update weights:
Calculate the slope using the get_slope() function.
Update the weights using a learning rate of 0.01.
Calculate the mean squared error (mse) with the updated weights using the get_mse() function.
Append mse to mse_hist.
Hit 'Submit Answer' to visualize mse_hist. What trend do you notice?





n_updates = 20
mse_hist = []

# Iterate over the number of updates
for i in range(n_updates):
    # Calculate the slope: slope
    slope = get_slope(input_data, target, weights)
    
    # Update the weights: weights
    weights = weights - (slope * 0.01)
    
    # Calculate mse with new weights: mse
    mse = get_mse(input_data, target, weights)
    
    # Append the mse to mse_hist
    mse_hist.append(mse)

# Plot the mse history
plt.plot(mse_hist)
plt.xlabel('Iterations')
plt.ylabel('Mean Squared Error')
plt.show()




Great work! As you can see, the mean squared error decreases as the number of iterations go up.





---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Q : 



The relationship between forward and backward propagation
If you have gone through 4 iterations of calculating slopes (using backward propagation) and then updated weights, how many times must you have done forward propagation?



 A : 


4.
press



Exactly! Each time you generate predictions using forward propagation, you update the weights using backward propagation.






---------------------------------------------------------------------------------------------------------------------------------------------------------------------



 Q : 



Thinking about backward propagation
If your predictions were all exactly right, and your errors were all exactly 0, the slope of the loss function with respect to your predictions would also be 0. In that circumstance, which of the following statements would be correct?




 A : 


The updates to all weights in the network would also be 0.
press





Correct! In this situation, the updates to all weights in the network would indeed also be 0.







---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Q : 



A round of backpropagation
In the network shown below, we have done forward propagation, and node values calculated as part of forward propagation are shown in white. The weights are shown in black. Layers after the question mark show the slopes calculated as part of back-prop, rather than the forward-prop values. Those slope values are shown in purple.

This network again uses the ReLU activation function, so the slope of the activation function is 1 for any node receiving a positive value as input. Assume the node being examined had a positive value (so the activation function's slope is 1).

Ch2Ex14_1
Image url : https://s3.amazonaws.com/assets.datacamp.com/production/course_3524/datasets/ch2ex14_1.png

What is the slope needed to update the weight with the question mark?

Ch2Ex14_2
image url : https://s3.amazonaws.com/assets.datacamp.com/production/course_3524/datasets/ch2ex14_2.png





 A : 


6.
press





Well done! The slope needed to update this weight is indeed 6. You're now ready to start building deep learning models with keras!







---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 
 Ref : 


Understanding your data
You will soon start building models in Keras to predict wages based on various professional and demographic factors. Before you start building a model, it's good to understand your data by performing some exploratory analysis.

The data is pre-loaded into a pandas DataFrame called df. Use the .head() and .describe() methods in the IPython Shell for a quick overview of the DataFrame.

The target variable you'll be predicting is wage_per_hour. Some of the predictor variables are binary indicators, where a value of 1 represents True, and 0 represents False.

 Q : 
 

 
 Of the 9 predictor variables in the DataFrame, how many are binary indicators? The min and max values as shown by .describe() will be informative here. How many binary indicator predictors are there?



 A : 


6



In [1]: df.describe()
Out[1]: 
       wage_per_hour       union  education_yrs  experience_yrs         age  \
count     534.000000  534.000000     534.000000      534.000000  534.000000   
mean        9.024064    0.179775      13.018727       17.822097   36.833333   
std         5.139097    0.384360       2.615373       12.379710   11.726573   
min         1.000000    0.000000       2.000000        0.000000   18.000000   
25%         5.250000    0.000000      12.000000        8.000000   28.000000   
50%         7.780000    0.000000      12.000000       15.000000   35.000000   
75%        11.250000    0.000000      15.000000       26.000000   44.000000   
max        44.500000    1.000000      18.000000       55.000000   64.000000   

           female        marr       south  manufacturing  construction  
count  534.000000  534.000000  534.000000     534.000000    534.000000  
mean     0.458801    0.655431    0.292135       0.185393      0.044944  
std      0.498767    0.475673    0.455170       0.388981      0.207375  
min      0.000000    0.000000    0.000000       0.000000      0.000000  
25%      0.000000    0.000000    0.000000       0.000000      0.000000  
50%      0.000000    1.000000    0.000000       0.000000      0.000000  
75%      1.000000    1.000000    1.000000       0.000000      0.000000  
max      1.000000    1.000000    1.000000       1.000000      1.000000



Exactly! There are 6 binary indicators.



 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 



Specifying a model
Now you'll get to work with your first model in Keras, and will immediately be able to run more complex neural network models on larger datasets compared to the first two chapters.

To start, you'll take the skeleton of a neural network and add a hidden layer and an output layer. You'll then fit that model and see Keras do the optimization so your model continually gets better.

As a start, you'll predict workers wages based on characteristics like their industry, education and level of experience. You can find the dataset in a pandas dataframe called df. For convenience, everything in df except for the target has been converted to a NumPy matrix called predictors. The target, wage_per_hour, is available as a NumPy matrix called target.

For all exercises in this chapter, we've imported the Sequential model constructor, the Dense layer constructor, and pandas.



 Q : 


Store the number of columns in the predictors data to n_cols. This has been done for you.
Start by creating a Sequential model called model.
Use the .add() method on model to add a Dense layer.
Add 50 units, specify activation='relu', and the input_shape parameter to be the tuple (n_cols,) which means it has n_cols items in each row of data, and any number of rows of data are acceptable as inputs.
Add another Dense layer. This should have 32 units and a 'relu' activation.
Finally, add an output layer, which is a Dense layer with a single node. Don't use any activation function here.






# Import necessary modules
import keras
from keras.layers import Dense
from keras.models import Sequential

# Save the number of columns in predictors: n_cols
n_cols = predictors.shape[1]

# Set up the model: model
model = Sequential()

# Add the first layer
model.add(Dense(50, activation = 'relu', input_shape=(n_cols , )))

# Add the second layer
model.add(Dense(32 , activation='relu' , input_shape = (n_cols , )))

# Add the output layer
model.add(Dense(1))




Well done! Now that you've specified the model, the next step is to compile it.




---------------------------------------------------------------------------------------------------------------------------------------------------------------------



 Ref : 


Compiling the model
You're now going to compile the model you specified earlier. To compile the model, you need to specify the optimizer and loss function to use. In the video, Dan mentioned that the Adam optimizer is an excellent choice. You can read more about it as well as other keras optimizers here, and if you are really curious to learn more, you can read the original paper that introduced the Adam optimizer.

In this exercise, you'll use the Adam optimizer and the mean squared error loss function. Go for it!




 Q : 



Compile the model using model.compile(). Your optimizer should be 'adam' and the loss should be 'mean_squared_error'.



# Import necessary modules
import keras
from keras.layers import Dense
from keras.models import Sequential

# Specify the model
n_cols = predictors.shape[1]
model = Sequential()
model.add(Dense(50, activation='relu', input_shape = (n_cols,)))
model.add(Dense(32, activation='relu'))
model.add(Dense(1))

# Compile the model
model.compile(optimizer = 'adam' , loss = 'mean_squared_error')

# Verify that model contains information from compiling
print("Loss function: " + model.loss)




<script.py> output:
    Loss function: mean_squared_error



Fantastic work - all that's left now is to fit the model!





---------------------------------------------------------------------------------------------------------------------------------------------------------------------



 Ref : 


Fitting the model
You're at the most fun part. You'll now fit the model. Recall that the data to be used as predictive features is loaded in a NumPy matrix called predictors and the data to be predicted is stored in a NumPy matrix called target. Your model is pre-written and it has been compiled with the code from the previous exercise.





 Q : 


Fit the model. Remember that the first argument is the predictive features (predictors), and the data to be predicted (target) is the second argument.




# Import necessary modules
import keras
from keras.layers import Dense
from keras.models import Sequential

# Specify the model
n_cols = predictors.shape[1]
model = Sequential()
model.add(Dense(50, activation='relu', input_shape = (n_cols,)))
model.add(Dense(32, activation='relu'))
model.add(Dense(1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Fit the model
model.fit(predictors , target)





<script.py> output:
    Epoch 1/10
    
 32/534 [>.............................] - ETA: 0s - loss: 146.0927
534/534 [==============================] - 0s - loss: 78.4764      
    Epoch 2/10
    
 32/534 [>.............................] - ETA: 0s - loss: 85.1685
534/534 [==============================] - 0s - loss: 30.3551     
    Epoch 3/10
    
 32/534 [>.............................] - ETA: 0s - loss: 21.0458
534/534 [==============================] - 0s - loss: 27.1004     
    Epoch 4/10
    
 32/534 [>.............................] - ETA: 0s - loss: 16.8587
534/534 [==============================] - 0s - loss: 25.1325     
    Epoch 5/10
    
 32/534 [>.............................] - ETA: 0s - loss: 23.2208
534/534 [==============================] - 0s - loss: 24.0389     
    Epoch 6/10
    
 32/534 [>.............................] - ETA: 0s - loss: 13.3877
224/534 [===========>..................] - ETA: 0s - loss: 25.1677
480/534 [=========================>....] - ETA: 0s - loss: 23.5278
534/534 [==============================] - 0s - loss: 23.2489     
    Epoch 7/10
    
 32/534 [>.............................] - ETA: 0s - loss: 28.1815
448/534 [========================>.....] - ETA: 0s - loss: 23.2542
534/534 [==============================] - 0s - loss: 22.5513     
    Epoch 8/10
    
 32/534 [>.............................] - ETA: 0s - loss: 11.5042
448/534 [========================>.....] - ETA: 0s - loss: 21.8776
534/534 [==============================] - 0s - loss: 22.1490     
    Epoch 9/10
    
 32/534 [>.............................] - ETA: 0s - loss: 21.9113
416/534 [======================>.......] - ETA: 0s - loss: 19.6185
534/534 [==============================] - 0s - loss: 21.7633     
    Epoch 10/10
    
 32/534 [>.............................] - ETA: 0s - loss: 5.4618
534/534 [==============================] - 0s - loss: 21.5564




Superb! You now know how to specify, compile, and fit a deep learning model using keras!






---------------------------------------------------------------------------------------------------------------------------------------------------------------------



 Ref : 


Understanding your classification data
Now you will start modeling with a new dataset for a classification problem. This data includes information about passengers on the Titanic. You will use predictors such as age, fare and where each passenger embarked from to predict who will survive. This data is from a tutorial on data science competitions. Look here for descriptions of the features.

The data is pre-loaded in a pandas DataFrame called df.

 Q : 



 It's smart to review the maximum and minimum values of each variable to ensure the data isn't misformatted or corrupted. What was the maximum age of passengers on the Titanic? Use the .describe() method in the IPython Shell to answer this question.





 A : 



80.




In [1]: df.describe()
Out[1]: 
         survived            ...              embarked_from_southampton
count  891.000000            ...                             891.000000
mean     0.383838            ...                               0.722783
std      0.486592            ...                               0.447876
min      0.000000            ...                               0.000000
25%      0.000000            ...                               0.000000
50%      0.000000            ...                               1.000000
75%      1.000000            ...                               1.000000
max      1.000000            ...                               1.000000

[8 rows x 10 columns]



In [2]: df.age.max()
Out[2]: 80.0




Exactly! The maximum age in the data is 80.




---------------------------------------------------------------------------------------------------------------------------------------------------------------------




 Ref : 


Last steps in classification models
You'll now create a classification model using the titanic dataset, which has been pre-loaded into a DataFrame called df. You'll take information about the passengers and predict which ones survived.

The predictive variables are stored in a NumPy array predictors. The target to predict is in df.survived, though you'll have to manipulate it for keras. The number of predictive features is stored in n_cols.

Here, you'll use the 'sgd' optimizer, which stands for Stochastic Gradient Descent. You'll learn more about this in the next chapter!




 Q : 



Convert df.survived to a categorical variable using the to_categorical() function.
Specify a Sequential model called model.
Add a Dense layer with 32 nodes. Use 'relu' as the activation and (n_cols,) as the input_shape.
Add the Dense output layer. Because there are two outcomes, it should have 2 units, and because it is a classification model, the activation should be 'softmax'.
Compile the model, using 'sgd' as the optimizer, 'categorical_crossentropy' as the loss function, and metrics=['accuracy'] to see the accuracy (what fraction of predictions were correct) at the end of each epoch.
Fit the model using the predictors and the target.





 # Import necessary modules
import keras
from keras.layers import Dense
from keras.models import Sequential
from keras.utils import to_categorical

# Convert the target to categorical: target
target = to_categorical(df.survived)

# Set up the model
model = Sequential()

# Add the first layer
model.add(Dense(32 , activation='relu' , input_shape = (n_cols , )))

# Add the output layer
model.add(Dense(2 , activation = 'softmax'))

# Compile the model
model.compile(optimizer = 'sgd' , loss = 'categorical_crossentropy' , metrics = ['accuracy'])

# Fit the model
model.fit(predictors , target)






<script.py> output:
    Epoch 1/10
    
 32/891 [>.............................] - ETA: 0s - loss: 7.6250 - acc: 0.2188
480/891 [===============>..............] - ETA: 0s - loss: 2.8825 - acc: 0.6000
891/891 [==============================] - 0s - loss: 2.5170 - acc: 0.5948     
    Epoch 2/10
    
 32/891 [>.............................] - ETA: 0s - loss: 1.1922 - acc: 0.3125
704/891 [======================>.......] - ETA: 0s - loss: 1.2351 - acc: 0.5980
891/891 [==============================] - 0s - loss: 1.1834 - acc: 0.6083     
    Epoch 3/10
    
 32/891 [>.............................] - ETA: 0s - loss: 2.1141 - acc: 0.5000
576/891 [==================>...........] - ETA: 0s - loss: 0.8728 - acc: 0.6372
891/891 [==============================] - 0s - loss: 0.7783 - acc: 0.6700     
    Epoch 4/10
    
 32/891 [>.............................] - ETA: 0s - loss: 0.7271 - acc: 0.5625
512/891 [================>.............] - ETA: 0s - loss: 0.6539 - acc: 0.6719
891/891 [==============================] - 0s - loss: 0.7257 - acc: 0.6689     
    Epoch 5/10
    
 32/891 [>.............................] - ETA: 0s - loss: 0.6173 - acc: 0.5938
704/891 [======================>.......] - ETA: 0s - loss: 0.6383 - acc: 0.6605
891/891 [==============================] - 0s - loss: 0.6529 - acc: 0.6588     
    Epoch 6/10
    
 32/891 [>.............................] - ETA: 0s - loss: 0.4729 - acc: 0.7500
608/891 [===================>..........] - ETA: 0s - loss: 0.5998 - acc: 0.6908
891/891 [==============================] - 0s - loss: 0.6164 - acc: 0.6936     
    Epoch 7/10
    
 32/891 [>.............................] - ETA: 0s - loss: 0.6736 - acc: 0.5938
352/891 [==========>...................] - ETA: 0s - loss: 0.6553 - acc: 0.6591
544/891 [=================>............] - ETA: 0s - loss: 0.6435 - acc: 0.6746
891/891 [==============================] - 0s - loss: 0.6414 - acc: 0.6835     
    Epoch 8/10
    
 32/891 [>.............................] - ETA: 0s - loss: 0.5461 - acc: 0.7188
416/891 [=============>................] - ETA: 0s - loss: 0.6616 - acc: 0.6659
768/891 [========================>.....] - ETA: 0s - loss: 0.6666 - acc: 0.6745
891/891 [==============================] - 0s - loss: 0.6651 - acc: 0.6779     
    Epoch 9/10
    
 32/891 [>.............................] - ETA: 0s - loss: 0.7452 - acc: 0.6562
544/891 [=================>............] - ETA: 0s - loss: 0.6310 - acc: 0.6857
891/891 [==============================] - 0s - loss: 0.6265 - acc: 0.6902     
    Epoch 10/10
    
 32/891 [>.............................] - ETA: 0s - loss: 0.5244 - acc: 0.7500
608/891 [===================>..........] - ETA: 0s - loss: 0.6495 - acc: 0.6661
891/891 [==============================] - 0s - loss: 0.6738 - acc: 0.6734




Fantastic! This simple model is generating an accuracy of 68!








---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 



Making predictions
The trained network from your previous coding exercise is now stored as model. New data to make predictions is stored in a NumPy array as pred_data. Use model to make predictions on your new data.

In this exercise, your predictions will be probabilities, which is the most common way for data scientists to communicate their predictions to colleagues.




 Q : 


Create your predictions using the model's .predict() method on pred_data.
Use NumPy indexing to find the column corresponding to predicted probabilities of survival being True. This is the second column (index 1) of predictions. Store the result in predicted_prob_true and print it.






# Specify, compile, and fit the model
model = Sequential()
model.add(Dense(32, activation='relu', input_shape = (n_cols,)))
model.add(Dense(2, activation='softmax'))
model.compile(optimizer='sgd', 
              loss='categorical_crossentropy', 
              metrics=['accuracy'])
model.fit(predictors, target)

# Calculate predictions: predictions
predictions = model.predict(pred_data)

# Calculate predicted probability of survival: predicted_prob_true
predicted_prob_true = predictions[: , 1]

# print predicted_prob_true
print(predicted_prob_true)





<script.py> output:
    Epoch 1/10
    
 32/800 [>.............................] - ETA: 0s - loss: 5.3679 - acc: 0.3438
704/800 [=========================>....] - ETA: 0s - loss: 2.3865 - acc: 0.5852
800/800 [==============================] - 0s - loss: 2.3207 - acc: 0.5825     
    Epoch 2/10
    
 32/800 [>.............................] - ETA: 0s - loss: 2.9760 - acc: 0.3438
672/800 [========================>.....] - ETA: 0s - loss: 1.3161 - acc: 0.5893
800/800 [==============================] - 0s - loss: 1.2146 - acc: 0.6088     
    Epoch 3/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.6110 - acc: 0.7188
448/800 [===============>..............] - ETA: 0s - loss: 0.7580 - acc: 0.6897
800/800 [==============================] - 0s - loss: 0.8469 - acc: 0.6562     
    Epoch 4/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.5084 - acc: 0.7188
480/800 [=================>............] - ETA: 0s - loss: 0.7820 - acc: 0.6917
800/800 [==============================] - 0s - loss: 0.7347 - acc: 0.6663     
    Epoch 5/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.5927 - acc: 0.6250
512/800 [==================>...........] - ETA: 0s - loss: 0.6182 - acc: 0.6953
800/800 [==============================] - 0s - loss: 0.6380 - acc: 0.6725     
    Epoch 6/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.6296 - acc: 0.6250
640/800 [=======================>......] - ETA: 0s - loss: 0.6502 - acc: 0.6734
800/800 [==============================] - 0s - loss: 0.6339 - acc: 0.6875     
    Epoch 7/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.5553 - acc: 0.7188
672/800 [========================>.....] - ETA: 0s - loss: 0.6962 - acc: 0.6711
800/800 [==============================] - 0s - loss: 0.6726 - acc: 0.6863     
    Epoch 8/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.6178 - acc: 0.6250
576/800 [====================>.........] - ETA: 0s - loss: 0.6730 - acc: 0.6580
800/800 [==============================] - 0s - loss: 0.6694 - acc: 0.6638     
    Epoch 9/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.6605 - acc: 0.6250
256/800 [========>.....................] - ETA: 0s - loss: 0.6522 - acc: 0.6523
608/800 [=====================>........] - ETA: 0s - loss: 0.6387 - acc: 0.6595
800/800 [==============================] - 0s - loss: 0.6291 - acc: 0.6750     
    Epoch 10/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.7398 - acc: 0.6250
576/800 [====================>.........] - ETA: 0s - loss: 0.6051 - acc: 0.6910
800/800 [==============================] - 0s - loss: 0.6184 - acc: 0.6837
Traceback (most recent call last):
  File "script.py", line 11, in <module>
    predictions = pred_data.predict()
AttributeError: 'numpy.ndarray' object has no attribute 'predict'

<script.py> output:
    Epoch 1/10
    
 32/800 [>.............................] - ETA: 0s - loss: 5.3679 - acc: 0.3438
704/800 [=========================>....] - ETA: 0s - loss: 2.3865 - acc: 0.5852
800/800 [==============================] - 0s - loss: 2.3207 - acc: 0.5825     
    Epoch 2/10
    
 32/800 [>.............................] - ETA: 0s - loss: 2.9760 - acc: 0.3438
736/800 [==========================>...] - ETA: 0s - loss: 1.2456 - acc: 0.6046
800/800 [==============================] - 0s - loss: 1.2019 - acc: 0.6088     
    Epoch 3/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.6071 - acc: 0.7500
736/800 [==========================>...] - ETA: 0s - loss: 0.7400 - acc: 0.6671
800/800 [==============================] - 0s - loss: 0.7325 - acc: 0.6650     
    Epoch 4/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.5543 - acc: 0.6875
736/800 [==========================>...] - ETA: 0s - loss: 0.7531 - acc: 0.6630
800/800 [==============================] - 0s - loss: 0.7487 - acc: 0.6600     
    Epoch 5/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.5900 - acc: 0.6875
672/800 [========================>.....] - ETA: 0s - loss: 0.6145 - acc: 0.6890
800/800 [==============================] - 0s - loss: 0.6201 - acc: 0.6800     
    Epoch 6/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.6340 - acc: 0.6250
736/800 [==========================>...] - ETA: 0s - loss: 0.6474 - acc: 0.6861
800/800 [==============================] - 0s - loss: 0.6424 - acc: 0.6900     
    Epoch 7/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.5620 - acc: 0.6562
448/800 [===============>..............] - ETA: 0s - loss: 0.6586 - acc: 0.6719
800/800 [==============================] - 0s - loss: 0.6492 - acc: 0.6875     
    Epoch 8/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.6170 - acc: 0.6250
448/800 [===============>..............] - ETA: 0s - loss: 0.6267 - acc: 0.6741
800/800 [==============================] - 0s - loss: 0.6502 - acc: 0.6725     
    Epoch 9/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.6680 - acc: 0.6562
736/800 [==========================>...] - ETA: 0s - loss: 0.6167 - acc: 0.6875
800/800 [==============================] - 0s - loss: 0.6204 - acc: 0.6863     
    Epoch 10/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.7271 - acc: 0.5938
736/800 [==========================>...] - ETA: 0s - loss: 0.6113 - acc: 0.6834
800/800 [==============================] - 0s - loss: 0.6127 - acc: 0.6837
Traceback (most recent call last):
  File "script.py", line 11, in <module>
    predictions = model.predict()
TypeError: predict() missing 1 required positional argument: 'x'

<script.py> output:
    Epoch 1/10
    
 32/800 [>.............................] - ETA: 0s - loss: 5.3679 - acc: 0.3438
704/800 [=========================>....] - ETA: 0s - loss: 2.3865 - acc: 0.5852
800/800 [==============================] - 0s - loss: 2.3207 - acc: 0.5825     
    Epoch 2/10
    
 32/800 [>.............................] - ETA: 0s - loss: 2.9760 - acc: 0.3438
352/800 [============>.................] - ETA: 0s - loss: 1.5748 - acc: 0.6023
608/800 [=====================>........] - ETA: 0s - loss: 1.3784 - acc: 0.5855
800/800 [==============================] - 0s - loss: 1.2073 - acc: 0.6100     
    Epoch 3/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.6073 - acc: 0.7812
352/800 [============>.................] - ETA: 0s - loss: 0.7246 - acc: 0.7159
800/800 [==============================] - 0s - loss: 0.8830 - acc: 0.6663     
    Epoch 4/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.5449 - acc: 0.7500
608/800 [=====================>........] - ETA: 0s - loss: 0.8819 - acc: 0.6480
800/800 [==============================] - 0s - loss: 0.8260 - acc: 0.6462     
    Epoch 5/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.5934 - acc: 0.7500
384/800 [=============>................] - ETA: 0s - loss: 0.6390 - acc: 0.6771
640/800 [=======================>......] - ETA: 0s - loss: 0.6587 - acc: 0.6828
800/800 [==============================] - 0s - loss: 0.6574 - acc: 0.6663     
    Epoch 6/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.6384 - acc: 0.7188
512/800 [==================>...........] - ETA: 0s - loss: 0.6658 - acc: 0.6465
800/800 [==============================] - 0s - loss: 0.6527 - acc: 0.6675     
    Epoch 7/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.5457 - acc: 0.7188
704/800 [=========================>....] - ETA: 0s - loss: 0.7391 - acc: 0.6676
800/800 [==============================] - 0s - loss: 0.7152 - acc: 0.6750     
    Epoch 8/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.6177 - acc: 0.6562
704/800 [=========================>....] - ETA: 0s - loss: 0.6928 - acc: 0.6634
800/800 [==============================] - 0s - loss: 0.6938 - acc: 0.6625     
    Epoch 9/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.6659 - acc: 0.6875
480/800 [=================>............] - ETA: 0s - loss: 0.6423 - acc: 0.6708
800/800 [==============================] - 0s - loss: 0.6255 - acc: 0.6750     
    Epoch 10/10
    
 32/800 [>.............................] - ETA: 0s - loss: 0.7103 - acc: 0.5938
384/800 [=============>................] - ETA: 0s - loss: 0.6318 - acc: 0.6615
800/800 [==============================] - 0s - loss: 0.6304 - acc: 0.6737     
    [0.23075886 0.3919376  0.9314901  0.5539349  0.22517131 0.19664165
     0.07362746 0.34897628 0.18024808 0.5489332  0.23880436 0.28988546
     0.18679921 0.49702787 0.2018731  0.14604193 0.281171   0.47834575
     0.11558535 0.48707098 0.6478416  0.23828001 0.07811803 0.32875183
     0.5278006  0.20104632 0.5747131  0.66741824 0.20612858 0.5816775
     0.47644374 0.5159653  0.21328741 0.27285597 0.34868363 0.68506145
     0.31306472 0.20077375 0.57387745 0.445574   0.3125129  0.39546937
     0.48320794 0.17973681 0.37143055 0.12425762 0.49818137 0.1826446
     0.48553818 0.7771548  0.46755302 0.025958   0.48294193 0.6054027
     0.24389938 0.3942523  0.9462042  0.19549584 0.4800611  0.21328741
     0.14465714 0.3339258  0.21992384 0.5207231  0.33333644 0.15739827
     0.32266203 0.54352605 0.21490185 0.47364077 0.23885001 0.48033687
     0.16243555 0.1039897  0.4165581  0.416623   0.35145557 0.32593837
     0.20002693 0.58433735 0.48315674 0.18217586 0.34812167 0.2617394
     0.2431282  0.4286744  0.30433047 0.5277541  0.38461083 0.49254283
     0.19431975]




Excellent work! You're now ready to begin learning how to fine-tune your models.





---------------------------------------------------------------------------------------------------------------------------------------------------------------------

















































































































































 
