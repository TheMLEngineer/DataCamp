

 Reference : 
 
 What are packages and why are they needed?
Conda packages are files containing a bundle of resources: usually libraries and executables, but not always. In principle, Conda packages can include data, images, notebooks, or other assets. The command-line tool conda is used to install, remove and examine packages; other tools such as the GUI Anaconda Navigator also expose the same capabilities. This course focuses on the conda tool itself (you'll see use cases other than package management in later chapters).

Conda packages are most widely used with Python, but that's not all. Nothing about the Conda package format or the conda tool itself assumes any specific programming language. Conda packages can also be used for bundling libraries in other languages (like R, Scala, Julia, etc.) or simply for distributing pure binary executables generated from any programming language.

One of the powerful aspects of conda—both the tool and the package format—is that dependencies are taken care of. That is, when you install any Conda package, any other packages needed get installed automatically. Tracking and determining software dependencies is a hard problem that package managers like Conda are designed to solve.

A Conda package, then, is a file containing all files needed to make a given program execute correctly on a given system. Moreover, a Conda package can contain binary artifacts specific to a particular platform or operating system. Most packages (and their dependendencies) are available for Windows (win-32 or win-64), for OSX (osx-64), and for Linux (linux-32 or linux-64). A small number of Conda packages are available for more specialized platforms (e.g., Raspberry Pi 2 or POWER8 LE). As a user, you do not need to specify the platform since Conda will simply choose the Conda package appropriate for the platform you are using.

What feature is NOT true of Conda packages?



 A  : Each package contains binary artifacts (executables) for all supported platforms.
press


Good! Each conda package does contain resources for one specific platform; the tool conda selects which package when it is invoked.


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



Reference : 


What version of conda do I have?
The tool conda takes a variety of commands and arguments. Most of the time, you will use conda COMMAND OPTIONS --SWITCH. You will learn the collection of COMMANDs available in the next lessons. A summary is available on the help screen:

$ conda --help
usage: conda [-h] [-V] command ...

conda is a tool for managing and deploying applications, environments and packages.

Options:

positional arguments:
  command
    clean        Remove unused packages and caches.
    config       Modify configuration values in .condarc. This is modeled
                 after the git config command. Writes to the user .condarc
                 file (/Users/dmertz/.condarc) by default.
    create       Create a new conda environment from a list of specified
                 packages.
    help         Displays a list of available conda commands and their help
                 strings.
    info         Display information about current conda install.
    install      Installs a list of packages into a specified conda
                 environment.
    [... more commands ...]

optional arguments:
  -h, --help     Show this help message and exit.
  -V, --version  Show the conda version number and exit.
  
  
  
  
 
 Q : 
 
 
 Run a command to determine what version of conda you have installed.
 
 
 (base) $ conda --version
conda 4.4.10


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



 Q : 
 
 Install a conda package (I)
Just as you can get help on conda as a whole, you can get help on commands within it. You will often use the command conda install; you can look at the corresponding help documentation using the terminal window. That is, run conda install --help and read through the output.

How is the positional argument package_spec defined in the documentation for conda install?


A : Packages to install into the conda environment.



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Reference : 

Install a conda package (II)
Installing a package is largely a matter of listing the name(s) of packages to install after the command conda install. But there is more to it behind the scenes. The versions of packages to install (along with all their dependencies) must be compatible with all versions of other software currently installed. Often this "satisfiability" constraint depends on choosing a package version compatible with a particular version of Python that is installed. Conda is special among "package managers" in that it always guarantees this consistency; you will see the phrase "Solving environment..." during installation to indicate this computation.

For example, you may simply instruct conda to install foo-lib. The tool first determines which operating system you are running, and then narrows the match to candidates made for this platform. Then, conda determines the version of Python on the system (say 3.7), and chooses the package version for -py37. But, beyond those simple limits, all dependencies are checked.

Suppose foo-lib is available in versions 1.0, 1.1, 1.2, 2.0, 2.1, 2.2, 2.3, 3.0, 3.1 (for your platform and Python version). As a first goal, conda attempts to choose the latest version of foo-lib. However, maybe foo-lib depends on bar-lib, which itself is available in various versions (say 1 through 20 in its versioning scheme). It might be that foo-lib 3.1 is compatible with bar-lib versions 17, 18, and 19; but blob-lib (which is already installed) is compatible only with versions of bar-lib less than 17. Therefore, conda would examine the compatibility of foo-lib 3.0 as a fallback. In this hypothetical, foo-lib 3.0 is compatible with bar-lib 16, so that version is chosen (bar-lib is also updated to the latest compatible version 16 in the same command if an earlier version is currently installed).

Visually (octagons mark chosen versions):

(Image URL : https://s3.amazonaws.com/assets.datacamp.com/production/course_5739/datasets/consistency.png )


A: 
$ conda install cytoolz


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Reference : 

What is semantic versioning?
Most Conda packages use a system called semantic versioning to identify distinct versions of a software package unambiguously. Version labels are usually chosen by the project authors, not necessarily the same people who bundle the project as a Conda package. There is no technical requirement that a project author's version label coincides with a Conda package version label, but the convention of doing so is almost always followed. Semantic version labels can be compared lexicographically and make it easy to determine which of two versions is the later version.

Under semantic versioning, software is labeled with a three-part version identifier of the form MAJOR.MINOR.PATCH; the label components are non-negative integers separated by periods. Assuming all software starts at version 0.0.0, the MAJOR version number is increased when significant new functionality is introduced (often with corresponding API changes). Increases in the MINOR version number generally reflect improvements (e.g., new features) that avoid backward-incompatible API changes. For instance, adding an optional argument to a function API (in a way that allows old code to run unchanged) is a change worthy of increasing the MINOR version number. An increment to the PATCH version number is approriate mostly for bug fixes that preserve the same MAJOR and MINOR revision numbers. Software patches do not typically introduce new features or change APIs at all (except sometimes to address security issues).

Many command-line tools display their version identifier by running tool --version. This information can sometimes be displayed or documented in other ways. For example, suppose on some system, a certain version of Python is installed, and you inquire about it like this:

 Q : 
 
python -c "import sys; sys.version"
'1.0.1 (Mar 26 2014)'
Looking at the output above, which statement below accurately characterizes the semantic versioning of this installed Python?


 The MAJOR version is 1, the PATCH is 1.
press


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Reference : 
 
 Which package version is installed?
Because conda installs packages automatically, it's hard to know which package versions are actually on your system. That is, packages you didn't install explicitly get installed for you to resolve another package's dependencies.

Fortunately, the command conda list comes to your aid to query the current state. By itself, this lists all packages currently installed.
You can use conda list --help to see how to extract specific packages from that list or how to display it in different formats.
 
 Q : 
 
Select the exact version of the package attrs installed in the current session.

 A : 
 
 
 (base) $ conda list attrs
 
 
 # packages in environment at /home/repl/miniconda:
#
# Name                    Version                   Build  Channel
attrs                     15.2.0                   py36_0


15.2.0


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 
 Reference : 
 
 Install a specific version of a package (I)
Sometimes there are reasons why you need to use a specific version of a package, not necessarily simply the latest version compatible with your other installed software. You may have scripts written that depend on particular older APIs, or you may have received code written by colleagues who used specific versions and you want to guarantee replication of the same behavior. Likewise, you may be writing code that you intend to pass to other users who you know to be using specific package versions on their systems (perhaps as a company standard, for example).

conda allows you to install software versions in several flexible ways. Your most common pattern will probably be prefix notation, using semantic versioning. For example, you might want a MAJOR and MINOR version, but want conda to select the most up-to-date PATCH version within that series. You could spell that as:

conda install foo-lib=12.3
Or similarly, you may want a particular major version, and prefer conda to select the latest compatible MINOR version as well as PATCH level. You could spell that as:

conda install foo-lib=13
If you want to narrow the installation down to an exact PATCH level, you can specify that as well with:

conda install foo-lib=14.3.2
Keep in mind that relaxing constraints may allow for satisfying multiple dependencies among installed software. Occasionally you will try to install some software version that is simply inconsistent with other software installed, and conda will warn you about that rather than install anything.



 Q : 
 
 Install the module attrs in the specific MAJOR and MINOR version 17.3.
 
 
 A : 
 
 
 (base) $ conda install attrs=17.3Solving environment: done

==> WARNING: A newer version of conda exists. <==
  current version: 4.4.10
  latest version: 4.6.14

Please update conda by running

    $ conda update -n base conda



## Package Plan ##

  environment location: /home/repl/miniconda

  added / updated specs:
    - attrs=17.3


The following packages will be downloaded:

    package                    |            build
    ---------------------------|-----------------
    hypothesis-4.23.6          |           py36_0         362 KB
    zope.interface-4.6.0       |   py36h7b6447c_0         207 KB
    zope-1.0                   |           py36_1           3 KB
    attrs-17.3.0               |   py36h5ab58ff_0          39 KB
    pympler-0.7                |             py_0         159 KB
    ------------------------------------------------------------
                                           Total:         770 KB

The following NEW packages will be INSTALLED:

    attrs:           17.3.0-py36h5ab58ff_0
    hypothesis:      4.23.6-py36_0
    pympler:         0.7-py_0
    zope:            1.0-py36_1
    zope.interface:  4.6.0-py36h7b6447c_0

The following packages will be UPDATED:

    ca-certificates: 2017.08.26-h1d4fec5_0 --> 2019.5.15-0
    certifi:         2018.1.18-py36_0      --> 2019.3.9-py36_0
    cryptography:    2.1.4-py36hd09be54_0  --> 2.7-py36h1ba5d50_0
    libedit:         3.1-heed3624_0        --> 3.1.20181209-hc058e9b_0
    libgcc-ng:       7.2.0-h7cc24e2_2      --> 9.1.0-hdf63c60_0
    libstdcxx-ng:    7.2.0-h7a57d05_2      --> 9.1.0-hdf63c60_0
    ncurses:         6.0-h9df7e31_2        --> 6.1-he6710b0_1
    openssl:         1.0.2n-hb7f436b_0     --> 1.1.1c-h7b6447c_1
    python:          3.6.4-hc3d631a_1      --> 3.6.8-h0371630_0
    sqlite:          3.22.0-h1bed415_0     --> 3.28.0-h7b6447c_0
    tk:              8.6.7-hc745277_3      --> 8.6.8-hbc83047_0
    xz:              5.2.3-h55aa19d_2      --> 5.2.4-h14c3975_4


Downloading and Extracting Packages
hypothesis 4.23.6:hypothesis 4.23.6: #######################################8hypothesis 4.23.6: ##################################################### | 100%
zope.interface 4.6.0:zope.interface 4.6.0: ###########################################2zope.interface 4.6.0: ################################################## | 100%
zope 1.0:zope 1.0: ############################################################## | 100%
attrs 17.3.0:attrs 17.3.0: ########################################################## | 100%
pympler 0.7:pympler 0.7: ########################################################### | 100%
Preparing transaction: done
Verifying transaction: done
Executing transaction: done



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Reference : 
 
 
 Install a specific version of a package (II)
Most commonly, you'll use prefix-notation to specify the package version(s) to install. But conda offers even more powerful comparison operations to narrow versions. For example, if you wish to install either bar-lib versions 1.0, 1.4 or 1.4.1b2, but definitely not version 1.1, 1.2 or 1.3, you could use:

conda install 'bar-lib=1.0|1.4*'
This may seem odd, but you might know, for example, that a bug was introduced in 1.1 that wasn't fixed until 1.4. You would prefer the 1.4 series, but, if it is incompatible with other packages, you can settle for 1.0. Notice we have used single quotes around the version expression in this case because several of the symbols in these more complex patterns have special meanings in terminal shells. It is easiest just to quote them.

With conda you can also use inequality comparisons to select candidate versions (still resolving dependency consistency). Maybe the bug above was fixed in 1.3.5, and you would like either the latest version available (perhaps even 1.5 or 2.0 have come out), but still avoiding versions 1.1 through 1.3.4. You could spell that as:

conda install 'bar-lib>=1.3.4,<1.1'

 Q : 
 
For this exercise, install the latest compatible version of attrs that is later than version 16, but earlier than version 17.3. Which version gets installed?


 A : Good! The compatible version of attrs that gets installed is 17.2.0.
 
 
 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



 Reference : 
 
 Update a conda package
Closely related to installing a particular version of a conda package is updating the installed version to the latest version possible that remains compatible with other installed software. conda will determine if it is possible to update dependencies of the package(s) you are directly updating, and do so if resolvable. At times, the single specified package will be updated exclusively since the current dependencies are correct for the new version. Obviously, at other times updating will do nothing because you are already at the latest version possible.

The command conda update PKGNAME is used to perform updates. Update is somewhat less "aggressive" than install in the sense that installing a specific (later) version will revise the versions in the dependency tree to a greater extent than an update. Often update will simply choose a later PATCH version even though potentially a later MAJOR or MINOR version could be made compatible with other installed packages.

Note that this conda command, as well as most others allow specification of multiple packages on the same line. For example, you might use:

conda update foo bar blob
To bring all of foo, bar, and blob up to the latest compatible versions mutually satisfiable.



 Q : 
 
 The package cytoolz is installed in the current image, but it's not the most recent version. Update it.
 
 
 A : 
 
 (base) $ conda update cytoolz
Solving environment: done


==> WARNING: A newer version of conda exists. <==
  current version: 4.4.10
  latest version: 4.6.14

Please update conda by running

    $ conda update -n base conda



## Package Plan ##

  environment location: /home/repl/miniconda

  added / updated specs:
    - cytoolz


The following packages will be UPDATED:

    ca-certificates: 2017.08.26-h1d4fec5_0 --> 2019.5.15-0
    certifi:         2018.1.18-py36_0      --> 2019.3.9-py36_0
    cryptography:    2.1.4-py36hd09be54_0  --> 2.7-py36h1ba5d50_0
    cytoolz:         0.8.2-py36h708bfd4_0  --> 0.9.0.1-py36h14c3975_1
    libedit:         3.1-heed3624_0        --> 3.1.20181209-hc058e9b_0
    libgcc-ng:       7.2.0-h7cc24e2_2      --> 9.1.0-hdf63c60_0
    libstdcxx-ng:    7.2.0-h7a57d05_2      --> 9.1.0-hdf63c60_0
    ncurses:         6.0-h9df7e31_2        --> 6.1-he6710b0_1
    openssl:         1.0.2n-hb7f436b_0     --> 1.1.1c-h7b6447c_1
    python:          3.6.4-hc3d631a_1      --> 3.6.8-h0371630_0
    sqlite:          3.22.0-h1bed415_0     --> 3.28.0-h7b6447c_0
    tk:              8.6.7-hc745277_3      --> 8.6.8-hbc83047_0
    xz:              5.2.3-h55aa19d_2      --> 5.2.4-h14c3975_4

Preparing transaction: done
Verifying transaction: done
Executing transaction: done


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



 Reference : 
 
 
 
 Remove a conda package
Finally, in direct package management, sometimes you want to remove a package. This is straightforward using the command conda remove PKGNAME. As with other commands, you may also optionally specify multiple packages separated by spaces.

Note that conda always tries to use the most recent versions of installed software that are compatible. Therefore, sometimes removing one package allows another package to be upgraded implicitly because only the removed package was requiring the older version of the dependency.


 Q : 
 
 
 Remove the package cytoolz using conda.
 
 A : 
 
 (base) $ conda remove cytoolz
Solving environment: done


==> WARNING: A newer version of conda exists. <==
  current version: 4.4.10
  latest version: 4.6.14

Please update conda by running

    $ conda update -n base conda



## Package Plan ##

  environment location: /home/repl/miniconda

  removed specs:
    - cytoolz


The following packages will be REMOVED:

    cytoolz:         0.8.2-py36h708bfd4_0

The following packages will be UPDATED:

    ca-certificates: 2017.08.26-h1d4fec5_0 --> 2019.5.15-0
    certifi:         2018.1.18-py36_0      --> 2019.3.9-py36_0
    cryptography:    2.1.4-py36hd09be54_0  --> 2.7-py36h1ba5d50_0
    libedit:         3.1-heed3624_0        --> 3.1.20181209-hc058e9b_0
    libgcc-ng:       7.2.0-h7cc24e2_2      --> 9.1.0-hdf63c60_0
    libstdcxx-ng:    7.2.0-h7a57d05_2      --> 9.1.0-hdf63c60_0
    ncurses:         6.0-h9df7e31_2        --> 6.1-he6710b0_1
    openssl:         1.0.2n-hb7f436b_0     --> 1.1.1c-h7b6447c_1
    python:          3.6.4-hc3d631a_1      --> 3.6.8-h0371630_0
    sqlite:          3.22.0-h1bed415_0     --> 3.28.0-h7b6447c_0
    tk:              8.6.7-hc745277_3      --> 8.6.8-hbc83047_0
    xz:              5.2.3-h55aa19d_2      --> 5.2.4-h14c3975_4

Preparing transaction: done
Verifying transaction: done
Executing transaction: done





---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



 Reference : 

Search for available package versions?
Sometimes you want to see what versions of a package are available as conda packages. By default conda search looks for those matching your platform (although switches allow tweaking this behavior).

 Q : 
 
 Check all versions of attrs available in platform.


A  :


(base) $ conda search attrs

Loading channels: done
Name                       Version                   Build  Channel
attrs                      15.2.0                   py27_0  defaults
attrs                      15.2.0                   py34_0  defaults
attrs                      15.2.0                   py35_0  defaults
attrs                      15.2.0                   py36_0  defaults
attrs                      17.2.0           py27h25ce645_0  defaults
attrs                      17.2.0           py35hde4ea97_0  defaults
attrs                      17.2.0           py36h8d46266_0  defaults
attrs                      17.3.0           py27hf19f258_0  defaults
attrs                      17.3.0           py35h20e33bf_0  defaults
attrs                      17.3.0           py36h5ab58ff_0  defaults
attrs                      17.4.0                   py27_0  defaults
attrs                      17.4.0                   py35_0  defaults
attrs                      17.4.0                   py36_0  defaults
attrs                      18.1.0                   py27_0  defaults
attrs                      18.1.0                   py35_0  defaults
attrs                      18.1.0                   py36_0  defaults
attrs                      18.1.0                   py37_0  defaults
attrs                      18.2.0           py27h28b3542_0  defaults
attrs                      18.2.0           py35h28b3542_0  defaults
attrs                      18.2.0           py36h28b3542_0  defaults
attrs                      18.2.0           py37h28b3542_0  defaults
attrs                      19.1.0                   py27_1  defaults
attrs                      19.1.0                   py36_1  defaults
attrs                      19.1.0                   py37_1  defaults
attrs                      19.1.0                     py_0  defaults




---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Reference : 
 
 
 Find dependencies for a package versions?
The conda info command reports a variety of details about a specific package. The syntax for specifying just one version is a little bit complex, but prefix notation is allowed here (just as you would with conda install).

For example, running conda info cytoolz=0.8.2 will report on all available package versions. As this package has been built for a variety of Python versions, a number of packages will be reported on. You can narrow your query further with, e.g.:

$ conda info cytoolz=0.8.2=py36_0

cytoolz 0.8.2 py36_0
--------------------
file name   : cytoolz-0.8.2-py36_0.tar.bz2
name        : cytoolz
version     : 0.8.2
build string: py36_0
build number: 0
channel     : https://repo.continuum.io/pkgs/free
size        : 352 KB
arch        : x86_64
constrains  : ()
date        : 2016-12-23
license     : BSD
md5         : cd6068b2389b1596147cc7218f0438fd
platform    : darwin
subdir      : osx-64
url         : https://repo.continuum.io/pkgs/free/osx-64/cytoolz-0.8.2-py36_0.tar.bz2
dependencies:
    python 3.6*
    toolz >=0.8.0
You may use the * wildcard within the match pattern. This is often useful to match 'foo=1.2.3=py36*' because recent builds have attached the hash of the build at the end of the Python version string, making the exact match unpredicatable.

 Q : 
 
 Determine the dependencies of the package numpy 1.13.1 with Python 3.6.0 on your current platform.



 A :  
 
 (base) $ conda info numpy=1.13.1=py36_0
numpy 1.13.1 py36_0-------------------
file name   : numpy-1.13.1-py36_0.tar.bz2
name        : numpy
version     : 1.13.1
build string: py36_0
build number: 0
channel     : https://repo.continuum.io/pkgs/free/linux-64
size        : 7.2 MB
arch        : x86_64
constrains  : ()
date        : 2017-07-07
license     : BSD
md5         : ab929d35e7c8a9d95ae7ab28cc19511f
platform    : linux
subdir      : linux-64
url         : https://repo.continuum.io/pkgs/free/linux-64/numpy-1.13.1-py36_0.tar.bz2
dependencies:
    blas * mkl
    mkl 2017.0.*
    python 3.6*
	
	
	
	mkl 2017.0.* and python 3.6*
	
	
	
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















































































































