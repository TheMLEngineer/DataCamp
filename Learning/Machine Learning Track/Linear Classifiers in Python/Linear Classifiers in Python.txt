

 Ref : 
 
 KNN classification
In this exercise you'll explore a subset of the Large Movie Review Dataset. The variables X_train, X_test, y_train, and y_test are already loaded into the environment. The X variables contain features based on the words in the movie reviews, and the y variables contain labels for whether the review sentiment is positive (+1) or negative (-1).

This course touches on a lot of concepts you may have forgotten, so if you ever need a quick refresher, download the Scikit-Learn Cheat Sheet and keep it handy!


 Q : 
 
 Create a KNN model with default hyperparameters.
Fit the model.
Print out the prediction for the test example 0.



from sklearn.neighbors import KNeighborsClassifier

# Create and fit the model
knn = KNeighborsClassifier()
knn.fit(X_train , y_train)

# Predict on the test features, print the results
pred = knn.predict(X_test)[0]
print("Prediction for test example 0:", pred)




<script.py> output:
    Prediction for test example 0: 1.0
	
	

Nice work! Looks like you remember how to use scikit-learn for supervised learning.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Q : 
 
 Comparing models
Compare k nearest neighbors classifiers with k=1 and k=5 on the handwritten digits data set, which is already loaded into the variables X_train, y_train, X_test, and y_test. You can set k with the n_neighbors parameter when creating the KNeighborsClassifier object, which is also already imported into the environment.

Which model has a higher test accuracy?




In [2]: from sklearn.neighbors import KNeighborsClassifier

In [3]: knn = KNeighborsClassifier(n_neighbors=1)

In [4]: knn.fit(X_train , y_train)
Out[4]: 
KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
           metric_params=None, n_jobs=1, n_neighbors=1, p=2,
           weights='uniform')

In [5]: knn.predict(X_test)
Out[5]: 
array([1, 5, 0, 7, 1, 0, 6, 1, 5, 4, 9, 2, 7, 8, 4, 6, 9, 3, 7, 4, 7, 1,
       8, 6, 0, 9, 6, 1, 3, 7, 5, 9, 8, 3, 2, 8, 8, 1, 1, 0, 7, 9, 0, 0,
       8, 7, 2, 7, 4, 3, 4, 3, 4, 0, 4, 7, 0, 5, 5, 5, 2, 1, 7, 0, 5, 1,
       8, 3, 3, 4, 0, 3, 7, 4, 3, 4, 2, 9, 7, 3, 2, 5, 3, 4, 1, 5, 5, 2,
       9, 2, 2, 2, 2, 7, 0, 8, 1, 7, 4, 2, 3, 8, 2, 3, 3, 0, 2, 9, 3, 2,
       3, 2, 8, 1, 1, 9, 1, 2, 0, 4, 8, 5, 4, 4, 7, 6, 7, 6, 6, 1, 7, 5,
       6, 3, 8, 3, 7, 1, 8, 5, 3, 4, 7, 8, 5, 0, 6, 0, 6, 3, 7, 6, 5, 6,
       2, 2, 2, 3, 0, 7, 6, 5, 6, 4, 1, 0, 6, 0, 6, 4, 0, 9, 3, 8, 1, 2,
       3, 1, 9, 0, 7, 6, 2, 9, 3, 5, 3, 4, 6, 3, 3, 7, 4, 9, 2, 7, 6, 1,
       6, 8, 4, 0, 3, 1, 0, 9, 9, 9, 0, 1, 8, 6, 8, 0, 9, 5, 9, 8, 2, 3,
       5, 3, 0, 8, 7, 4, 0, 3, 3, 3, 6, 3, 3, 2, 9, 1, 6, 9, 0, 4, 2, 2,
       7, 9, 1, 6, 7, 6, 3, 9, 1, 9, 3, 4, 0, 6, 4, 8, 5, 3, 6, 3, 1, 4,
       0, 4, 4, 8, 7, 9, 1, 5, 2, 7, 0, 9, 0, 4, 4, 0, 1, 0, 6, 4, 2, 8,
       5, 0, 2, 6, 0, 1, 8, 2, 0, 9, 5, 6, 7, 0, 5, 0, 9, 1, 4, 7, 1, 7,
       0, 6, 6, 8, 0, 2, 2, 6, 9, 9, 7, 5, 1, 7, 6, 4, 6, 1, 9, 4, 7, 1,
       3, 7, 8, 1, 6, 9, 8, 3, 2, 4, 8, 7, 5, 5, 6, 9, 9, 8, 5, 0, 0, 4,
       9, 3, 0, 4, 9, 4, 2, 5, 4, 9, 6, 4, 2, 6, 0, 0, 5, 6, 7, 1, 9, 2,
       5, 1, 5, 9, 8, 7, 7, 0, 6, 9, 3, 1, 9, 3, 9, 8, 7, 0, 2, 3, 9, 9,
       2, 8, 1, 9, 3, 3, 0, 0, 7, 3, 8, 7, 9, 9, 7, 1, 0, 4, 5, 4, 1, 7,
       3, 6, 5, 4, 9, 0, 5, 9, 1, 4, 5, 0, 4, 3, 4, 2, 3, 9, 0, 8, 7, 8,
       6, 9, 4, 5, 7, 8, 3, 7, 8, 3])

In [6]: knn.score()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    knn.score()
TypeError: score() missing 2 required positional arguments: 'X' and 'y'

In [7]: knn.score(X_test , y_test)
Out[7]: 0.9888888888888889

In [8]: knn = KNeighborsClassifier(n_neighbors=5)

In [9]: knn.fit(X_train , y_train)
Out[9]: 
KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
           metric_params=None, n_jobs=1, n_neighbors=5, p=2,
           weights='uniform')

In [10]: knn.predict(X_test , y_test)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    knn.predict(X_test , y_test)
TypeError: predict() takes 2 positional arguments but 3 were given

In [11]: knn.predict(X_test)
Out[11]: 
array([1, 5, 0, 7, 1, 0, 6, 1, 5, 4, 9, 2, 7, 8, 4, 6, 9, 3, 7, 4, 7, 1,
       8, 6, 0, 9, 6, 1, 3, 7, 5, 9, 8, 3, 2, 8, 8, 1, 1, 0, 7, 9, 0, 0,
       8, 7, 2, 7, 4, 3, 4, 3, 4, 0, 4, 7, 0, 5, 5, 5, 2, 1, 7, 0, 5, 1,
       8, 3, 3, 4, 0, 3, 7, 4, 3, 4, 2, 9, 7, 3, 2, 5, 3, 4, 1, 5, 5, 2,
       5, 2, 2, 2, 2, 7, 0, 8, 1, 7, 4, 2, 3, 8, 2, 3, 3, 0, 2, 9, 9, 2,
       3, 2, 8, 1, 1, 9, 1, 2, 0, 4, 8, 5, 4, 4, 7, 6, 7, 6, 6, 1, 7, 5,
       6, 3, 8, 3, 7, 1, 8, 5, 3, 4, 7, 8, 5, 0, 6, 0, 6, 3, 7, 6, 5, 6,
       2, 2, 2, 3, 0, 7, 6, 5, 6, 4, 1, 0, 6, 0, 6, 4, 0, 9, 3, 8, 1, 2,
       3, 1, 9, 0, 7, 6, 2, 9, 3, 5, 3, 4, 6, 3, 3, 7, 4, 9, 2, 7, 6, 1,
       6, 8, 4, 0, 3, 1, 0, 9, 9, 9, 0, 1, 8, 6, 8, 0, 9, 5, 9, 8, 2, 3,
       5, 3, 0, 8, 7, 4, 0, 3, 3, 3, 6, 3, 3, 2, 9, 1, 6, 9, 0, 4, 2, 2,
       7, 9, 1, 6, 7, 6, 3, 9, 1, 9, 3, 4, 0, 6, 4, 8, 5, 3, 6, 3, 1, 4,
       0, 4, 4, 8, 7, 9, 1, 5, 2, 7, 0, 9, 0, 4, 4, 0, 1, 0, 6, 4, 2, 8,
       5, 0, 2, 6, 0, 1, 8, 2, 0, 9, 5, 6, 7, 0, 5, 0, 9, 1, 4, 7, 1, 7,
       0, 6, 6, 8, 0, 2, 2, 6, 9, 9, 7, 5, 1, 7, 6, 4, 6, 1, 9, 4, 7, 1,
       3, 7, 8, 1, 6, 9, 8, 3, 2, 4, 8, 7, 5, 5, 6, 9, 9, 8, 5, 0, 0, 4,
       9, 3, 0, 4, 9, 4, 2, 5, 4, 9, 6, 4, 2, 6, 0, 0, 5, 6, 7, 1, 9, 2,
       5, 1, 5, 9, 8, 7, 7, 0, 6, 9, 3, 1, 9, 3, 9, 8, 7, 0, 2, 3, 9, 9,
       2, 8, 1, 9, 3, 3, 0, 0, 7, 3, 8, 7, 9, 9, 7, 1, 0, 4, 5, 4, 1, 7,
       3, 6, 5, 4, 9, 0, 5, 9, 1, 4, 5, 0, 4, 3, 4, 2, 3, 9, 0, 8, 7, 8,
       6, 9, 4, 5, 7, 8, 3, 7, 8, 3])

In [12]: knn.score(X_test , y_test)
Out[12]: 0.9933333333333333



 A : 
 
 k=5



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Q : 
 
 Overfitting
Which of the following situations looks like an example of overfitting?


 A : 
 
 Training accuracy 95%, testing accuracy 50%.
press


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Ref : 
 
 Running LogisticRegression and SVC
In this exercise, you'll apply logistic regression and a support vector machine to classify images of handwritten digits.


 Q : 
 
 Apply logistic regression and SVM (using SVC()) to the handwritten digits data set using the provided train/validation split.
For each classifier, print out the training and validation accuracy.


from sklearn import datasets
digits = datasets.load_digits()
X_train, X_test, y_train, y_test = train_test_split(digits.data, digits.target)

# Apply logistic regression and print scores
lr = LogisticRegression()
lr.fit(X_train , y_train)
print(lr.score(X_train , y_train))
print(lr.score(X_test , y_test))

# Apply SVM and print scores
svm = SVC()
svm.fit(X_train , y_train)
print(svm.score(X_train , y_train))
print(svm.score(X_test , y_test))



<script.py> output:
    0.9985152190051967
    0.9622222222222222
    1.0
    0.4
	
Nicely done! Later in the course we'll look at the similarities and differences of logistic regression vs. SVMs.



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Ref : 
 
 Sentiment analysis for movie reviews
In this exercise you'll explore the probabilities outputted by logistic regression on a subset of the Large Movie Review Dataset.

The variables X and y are already loaded into the environment. X contains features based on the number of times words appear in the movie reviews, and y contains labels for whether the review sentiment is positive (+1) or negative (-1).




 Q : 
 
 Train a logistic regression model on the movie review data.
Predict the probabilities of negative vs. positive for the two given reviews.
Feel free to write your own reviews and get probabilities for those too!




# Instantiate logistic regression and train
lr = LogisticRegression()
lr.fit(X , y)

# Predict sentiment for a glowing review
review1 = "LOVED IT! This movie was amazing. Top 10 this year."
review1_features = get_features(review1)
print("Review:", review1)
print("Probability of positive review:", lr.predict_proba(review1_features )[0,1])

# Predict sentiment for a poor review
review2 = "Total junk! I'll never watch a film by that director again, no matter how good the reviews."
review2_features = get_features(review2)
print("Review:", review2)
print("Probability of positive review:", lr.predict_proba( review2_features)[0,1])



<script.py> output:
    Review: LOVED IT! This movie was amazing. Top 10 this year.
    Probability of positive review: 0.8079007873616059
    Review: Total junk! I'll never watch a film by that director again, no matter how good the reviews.
    Probability of positive review: 0.5855117402793947
	
	
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Q : 
 
 Which decision boundary is linear?
Which of the following is a linear decision boundary?
(Image URL : https://s3.amazonaws.com/assets.datacamp.com/production/course_6199/datasets/multiple_choce_linear_boundary.png)

 A : 
 
 (1)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Ref : 
 
 Visualizing decision boundaries
In this exercise, you'll visualize the decision boundaries of various classifier types.

A subset of scikit-learn's built-in wine dataset is already loaded into X, along with binary labels in y.


 Q : 
 
 Create the following classifier objects with default hyperparameters: LogisticRegression, LinearSVC, SVC, KNeighborsClassifier.
Fit each of the classifiers on the provided data using a for loop.
Call the plot_4_classifers() function (similar to the code here), passing in X, y, and a list containing the four classifiers.





from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC, LinearSVC
from sklearn.neighbors import KNeighborsClassifier

# Define the classifiers
classifiers = [LogisticRegression(), LinearSVC(), SVC(), KNeighborsClassifier()]

# Fit the classifiers
for c in classifiers:
    c.fit(X , y  )

# Plot the classifiers
plot_4_classifiers(X, y, classifiers)
plt.show()


Nice! As you can see, logistic regression and linear SVM are linear classifiers whereas the default SVM and KNN are not.



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Q : 



How models make predictions
Which classifiers make predictions based on the sign (positive or negative) of the raw model output?




 A : 


Both logistic regression and Linear SVMs
press


Nice! Furthermore, since logistic regression and SVMs are both linear classifiers, the raw model output is a linear function of x.



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 


Changing the model coefficients
When you call fit with scikit-learn, the logistic regression coefficients are automatically learned from your dataset. In this exercise you will explore how the decision boundary is represented by the coefficients. To do so, you will change the coefficients manually (instead of with fit), and visualize the resulting classifiers.

A 2D dataset is already loaded into the environment as X and y, along with a linear classifier object model.




 Q : 


Set the two coefficients and the intercept to various values and observe the resulting decision boundaries.
Try to build up a sense of how the coefficients relate to the decision boundary.
Set the coefficients and intercept such that the model makes no errors on the given training data.




# Set the coefficients
model.coef_ = np.array([[-1,1]])
model.intercept_ = np.array([-3])

# Plot the data and decision boundary
plot_classifier(X,y,model)

# Print the number of errors
num_err = np.sum(y != model.predict(X))
print("Number of errors:", num_err)



<script.py> output:
    Number of errors: 0


Hint
The first element of model.coef_ should be a negative number, and the second element should be a positive number.
Remember that coef_ controls the angle of the boundary and intercept_ shifts the boundary without changing the angle.


Great job! As you've been experiencing, the coefficients determine the slope of the boundary and the intercept shifts it.



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




 Q : 

The 0-1 loss
In the figure below, what is the 0-1 loss (number of classification errors) of the classifier?



(Image URL : https://s3.amazonaws.com/assets.datacamp.com/production/course_6199/datasets/01_loss_single.png)



 A : 
2


Correct! There is 1 misclassified red point and 1 misclassified blue point.




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 


Minimizing a loss function
In this exercise you'll implement linear regression "from scratch" using scipy.optimize.minimize.

We'll train a model on the Boston housing price data set, which is already loaded into the variables X and y. For simplicity, we won't include an intercept in our regression model.




 Q : 


Fill in the loss function for least squares linear regression.
Print out the coefficients from fitting sklearn's LinearRegression.




# The squared error, summed over training examples
def my_loss(w):
    s = 0
    for i in range(y.size):
        # Get the true and predicted target values for example 'i'
        y_i_true = y[i]
        y_i_pred = w@X[i]
        s = s + (y_i_true - y_i_pred)**2
    return s

# Returns the w that makes my_loss(w) smallest
w_fit = minimize(my_loss, X[0]).x
print(w_fit)

# Compare with scikit-learn's LinearRegression coefficients
lr = LinearRegression(fit_intercept=False).fit(X,y)
print(lr.coef_)




<script.py> output:
    [-9.16299112e-02  4.86754828e-02 -3.77698794e-03  2.85635998e+00
     -2.88057050e+00  5.92521269e+00 -7.22470732e-03 -9.67992974e-01
      1.70448714e-01 -9.38971600e-03 -3.92421893e-01  1.49830571e-02
     -4.16973012e-01]
    [-9.16297843e-02  4.86751203e-02 -3.77930006e-03  2.85636751e+00
     -2.88077933e+00  5.92521432e+00 -7.22447929e-03 -9.67995240e-01
      1.70443393e-01 -9.38925373e-03 -3.92425680e-01  1.49832102e-02
     -4.16972624e-01]



Great job! This was a tough one. Isn't it cool how you reproduce the weights learned by scikit-learn?





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



 Q : 


Classification loss functions
Which of the four loss functions makes sense for classification?



(Image URL : https://s3.amazonaws.com/assets.datacamp.com/production/course_6199/datasets/multiple_choice_loss_diagram.png)

 A : 

2



Correct! This loss is very similar to the hinge loss used in SVMs (just shifted slightly).





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 



Comparing the logistic and hinge losses
In this exercise you'll create a plot of the logistic and hinge losses using their mathematical expressions, which are provided to you.

The loss function diagram from the video is shown on the right.




 Q : 


Evaluate the log_loss() and hinge_loss() functions at the grid points so that they are plotted.



# Mathematical functions for logistic and hinge losses
def log_loss(raw_model_output):
   return np.log(1+np.exp(-raw_model_output))
def hinge_loss(raw_model_output):
   return np.maximum(0,1-raw_model_output)

# Create a grid of values and plot
grid = np.linspace(-2,2,1000)
plt.plot(grid, log_loss(grid), label='logistic')
plt.plot(grid, hinge_loss(grid), label='hinge')
plt.legend()
plt.show()




Nice! As you can see, these match up with the loss function diagrams we saw in the video.




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 


Implementing logistic regression
This is very similar to the earlier exercise where you implemented linear regression "from scratch" using scipy.optimize.minimize. However, this time we'll minimize the logistic loss and compare with scikit-learn's LogisticRegression (we've set C to a large value to disable regularization; more on this in Chapter 3!).

The log_loss() function from the previous exercise is already defined in your environment, and the sklearn breast cancer prediction dataset (first 10 features, standardized) is loaded into the variables X and y.




 Q : 


Input the number of training examples into range().
Fill in the loss function for logistic regression.
Compare the coefficients to sklearn's LogisticRegression.




# The logistic loss, summed over training examples
def my_loss(w):
    s = 0
    for i in range(X.shape[0]):
        raw_model_output = w@X[i]
        s = s + log_loss(raw_model_output * y[i])
    return s

# Returns the w that makes my_loss(w) smallest
w_fit = minimize(my_loss, X[0]).x
print(w_fit)

# Compare with scikit-learn's LogisticRegression
lr = LogisticRegression(fit_intercept=False, C=1000000).fit(X,y)
print(lr.coef_)





<script.py> output:
    [ 1.03592182 -1.65378492  4.08331342 -9.40923002 -1.06786489  0.07892114
     -0.85110344 -2.44103305 -0.45285671  0.43353448]
    [[ 1.03731085 -1.65339037  4.08143924 -9.40788356 -1.06757746  0.07895582
      -0.85072003 -2.44079089 -0.45271     0.43334997]]



Great job! As you can see, logistic regression is just minimizing the loss function we've been looking at. Much more on logistic regression in the next chapter!





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Ref : 
 
 Regularized logistic regression
In Chapter 1, you used logistic regression on the handwritten digits data set. Here, we'll explore the effect of L2 regularization.

The handwritten digits dataset is already loaded, split, and stored in the variables X_train, y_train, X_valid, and y_valid. The variables train_errs and valid_errs are already initialized as empty lists.


 Q : 
 
 Loop over the different values of C_value, creating and fitting a LogisticRegression model each time.
Save the error on the training set and the validation set for each model.
Create a plot of the training and testing error as a function of the regularization parameter, C.
Looking at the plot, what's the best value of C?


# Train and validaton errors initialized as empty list
train_errs = list()
valid_errs = list()

# Loop over values of C_value
for C_value in [0.001, 0.01, 0.1, 1, 10, 100, 1000]:
    # Create LogisticRegression object and fit
    lr = LogisticRegression(C = C_value)
    lr.fit(X_train , y_train)
    
    # Evaluate error rates and append to lists
    train_errs.append( 1.0 - lr.score(X_train , y_train) )
    valid_errs.append( 1.0 - lr.score(X_valid , y_valid) )
    
# Plot results
plt.semilogx(C_values, train_errs, C_values, valid_errs)
plt.legend(("train", "validation"))
plt.show()


Congrats! As you can see, too much regularization (small C) doesn't work well - due to underfitting - and too little regularization (large C) doesn't work well either - due to overfitting.



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Ref : 
 
 Logistic regression and feature selection
In this exercise we'll perform feature selection on the movie review sentiment data set using L1 regularization. The features and targets are already loaded for you in X_train and y_train.

We'll search for the best value of C using scikit-learn's GridSearchCV(), which was covered in the prerequisite course.


 Q : 
 
 
 
 Instantiate a logistic regression object that uses L1 regularization.
Find the value of C that minimizes cross-validation error.
Print out the number of selected features for this value of C.




# Specify L1 regularization
lr = LogisticRegression(penalty = 'l1')

# Instantiate the GridSearchCV object and run the search
searcher = GridSearchCV(lr, {'C':[0.001, 0.01, 0.1, 1, 10]})
searcher.fit(X_train, y_train)

# Report the best parameters
print("Best CV params", searcher.best_params_)

# Find the number of nonzero coefficients (selected features)
best_lr = searcher.best_estimator_
coefs = best_lr.coef_
print("Total number of features:", coefs.size)
print("Number of selected features:", np.count_nonzero(coefs))





<script.py> output:
    Best CV params {'C': 1}
    Total number of features: 2500
    Number of selected features: 1220



Great job! As you can see, a whole lot of features were discarded here.



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Ref : 
 
 Identifying the most positive and negative words
In this exercise we'll try to interpret the coefficients of a logistic regression fit on the movie review sentiment dataset. The model object is already instantiated and fit for you in the variable lr.

In addition, the words corresponding to the different features are loaded into the variable vocab. For example, since vocab[100] is "think", that means feature 100 corresponds to the number of times the word "think" appeared in that movie review.


 Q : 
 
 Find the words corresponding to the 5 largest coefficients.
Find the words corresponding to the 5 smallest coefficients.



# Get the indices of the sorted cofficients
inds_ascending = np.argsort(lr.coef_.flatten()) 
inds_descending = inds_ascending[::-1]

# Print the most positive words
print("Most positive words: ", end="")
for i in range(5):
    print(vocab[inds_descending[i]], end=", ")
print("\n")

# Print most negative words
print("Most negative words: ", end="")
for i in range(5):
    print(vocab[inds_ascending[i]], end=", ")
print("\n")


<script.py> output:
    Most positive words: favorite, superb, noir, knowing, loved, 
    
    Most negative words: disappointing, waste, worst, boring, lame,
	
	
You got it! The answers sort of make sense, don't they?

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Q : 
 
 Getting class probabilities
Which of the following transformations would make sense for transforming the raw model output of a linear classifier into a class probability?


 (Image URL : https://s3.amazonaws.com/assets.datacamp.com/production/course_6199/datasets/multiple_choice_proba_transform.png)_
 
 

 A : 
 
 3
 
 That's right! The function in the picture is fairly similar to the logistic function used by logistic regression.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Ref : 
 
 Regularization and probabilities
In this exercise, you will observe the effects of changing the regularization strength on the predicted probabilities.

A 2D binary classification dataset is already loaded into the environment as X and y.


 Q : 
 
 Compute the maximum predicted probability.
Run the provided code and take a look at the plot.



# Set the regularization strength
model = LogisticRegression(C=1)

# Fit and plot
model.fit(X,y)
plot_classifier(X,y,model,proba=True)

# Predict probabilities on training points
prob = model.predict_proba(X)
print("Maximum predicted probability", np.max(prob))



Create a model with C=0.1 and examine how the plot and probabilities change.

# Set the regularization strength
model = LogisticRegression(C=0.1)

# Fit and plot
model.fit(X,y)
plot_classifier(X,y,model,proba=True)

# Predict probabilities on training points
prob = model.predict_proba(X)
print("Maximum predicted probability", np.max(prob))



<script.py> output:
    Maximum predicted probability 0.9761229966765974

<script.py> output:
    Maximum predicted probability 0.8990965659596716
	
	
You got it! As you probably noticed, smaller values of C lead to less confident predictions. That's because smaller C means more regularization, which in turn means smaller coefficients, which means raw model outputs closer to zero and, thus, probabilities closer to 0.5 after the raw model output is squashed through the sigmoid function. That's quite a chain of events!



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Ref : 
 
 Visualizing easy and difficult examples
In this exercise, you'll visualize the examples that the logistic regression model is most and least confident about by looking at the largest and smallest predicted probabilities.

The handwritten digits dataset is already loaded into the variables X and y. The show_digit function takes in an integer index and plots the corresponding image, with some extra information displayed above the image.


 Q : 
 
 Fill in the first blank with the index of the digit that the model is most confident about.
Fill in the second blank with the index of the digit that the model is least confident about.
Observe the images: do you agree that the first one is less ambiguous than the second?



lr = LogisticRegression()
lr.fit(X,y)

# Get predicted probabilities
proba = lr.predict_proba(X)

# Sort the example indices by their maximum probability
proba_inds = np.argsort(np.max(proba,axis=1))

# Show the most confident (least ambiguous) digit
show_digit(proba_inds[-1], lr)

# Show the least confident (most ambiguous) digit
show_digit(proba_inds[0], lr)


Great job! As you can see, the least confident example looks like a weird 4, and the most confident example looks like a very typical 0.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Q : 
 
 Counting the coefficients
If you fit a logistic regression model on a classification problem with 3 classes and 100 features, how many coefficients would you have, including intercepts?


 A : 
 
 303
 
 

Nicely done! Feel free to test this out with scikit-learn!

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Ref : 
 
 Fitting multi-class logistic regression
In this exercise, you'll fit the two types of multi-class logistic regression, one-vs-rest and softmax/multinomial, on the handwritten digits data set and compare the results. The handwritten digits dataset is already loaded and split into X_train, y_train, X_test, and y_test.


 Q : 
 
 Fit a one-vs-rest logistic regression classifier and report the results.
Fit a softmax logistic regression classifier by setting the multiclass paramater, plus setting to be solver = "lbfgs", and report the results.


# Fit one-vs-rest logistic regression classifier
lr_ovr = LogisticRegression()
lr_ovr.fit(X_train, y_train)

print("OVR training accuracy:", lr_ovr.score(X_train, y_train))
print("OVR test accuracy    :", lr_ovr.score(X_test, y_test))

# Fit softmax classifier
lr_mn = LogisticRegression(multi_class='multinomial' , solver = 'lbfgs')
lr_mn.fit(X_train, y_train)

print("Softmax training accuracy:", lr_mn.score(X_train, y_train))
print("Softmax test accuracy    :", lr_mn.score(X_test, y_test))




<script.py> output:
    OVR training accuracy: 0.9948032665181886
    OVR test accuracy    : 0.9644444444444444
    Softmax training accuracy: 1.0
    Softmax test accuracy    : 0.9688888888888889
	
	
Nice work! As you can see, the accuracies of the two methods are fairly similar on this data set.



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Ref : 
 
 Visualizing multi-class logistic regression
In this exercise we'll continue with the two types of multi-class logistic regression, but on a toy 2D data set specifically designed to break the one-vs-rest scheme.

The data set is loaded into X_train and y_train. The two logistic regression objects,lr_mn and lr_ovr, are already instantiated (with C=100), fit, and plotted.

Notice that lr_ovr never predicts the dark blue class... yikes! Let's explore why this happens by plotting one of the binary classifiers that it's using behind the scenes.


 Q : 
 
 Create a new logistic regression object (also with C=100) to be used for binary classification.
Visualize this binary classifier with plot_classifier... does it look reasonable?





# Print training accuracies
print("Softmax     training accuracy:", lr_mn.score(X_train, y_train))
print("One-vs-rest training accuracy:", lr_ovr.score(X_train, y_train))

# Create the binary classifier (class 1 vs. rest)
lr_class_1 = LogisticRegression(C = 100)
lr_class_1.fit(X_train, y_train==1)

# Plot the binary classifier (class 1 vs. rest)
plot_classifier(X_train, y_train==1, lr_class_1)




<script.py> output:
    Softmax     training accuracy: 0.996
    One-vs-rest training accuracy: 0.916
	
	
Nice work! As you can see, the binary classifier incorrectly labels almost all points in class 1 (shown as red triangles in the final plot)! Thus, this classifier is not a very effective component of the one-vs-rest classifier. In general, though, one-vs-rest often works well.





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



 Ref : 
 
 One-vs-rest SVM
As motivation for the next and final chapter on support vector machines, we'll repeat the previous exercise with a non-linear SVM. Once again, the data is loaded into X_train, y_train, X_test, and y_test .

Instead of using LinearSVC, we'll now use scikit-learn's SVC object, which is a non-linear "kernel" SVM (much more on what this means in Chapter 4!). Again, your task is to create a plot of the binary classifier for class 1 vs. rest.


 Q : 
 
 Fit an SVC called svm_class_1 to predict class 1 vs. other classes.
Plot this classifier.



# We'll use SVC instead of LinearSVC from now on
from sklearn.svm import SVC

# Create/plot the binary classifier (class 1 vs. rest)
svm_class_1 = SVC()
svm_class_1.fit(X_train , y_train == 1)
plot_classifier(X_train , y_train == 1,svm_class_1)


Cool, eh?! The non-linear SVM works fine with one-vs-rest on this dataset because it learns to "surround" class 1.



------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



 Q : 
 
 Support vector definition
Which of the following is a true statement about support vectors? To help you out, here's the picture of support vectors from the video (top), as well as the hinge loss from Chapter 2 (bottom).


(Image URL : https://s3.amazonaws.com/assets.datacamp.com/production/course_6199/datasets/slides_svm_sv.png)

 A : 
 
 All incorrectly classified points are support vectors.
press


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Ref : 
 
 Effect of removing examples
Support vectors are defined as training examples that influence the decision boundary. In this exercise, you'll observe this behavior by removing non support vectors from the training set.

The wine quality dataset is already loaded into X and y (first two features only). (Note: we specify lims in plot_classifier() so that the two plots are forced to use the same axis limits and can be compared directly.)


 Q : 
 
 Train a linear SVM on the whole data set.
Create a new data set containing only the support vectors.
Train a new linear SVM on the smaller data set.



# Train a linear SVM
svm = SVC(kernel="linear")
svm.fit(X ,y)
plot_classifier(X, y, svm, lims=(11,15,0,6))

# Make a new data set keeping only the support vectors
print("Number of original examples", len(X))
print("Number of support vectors", len(svm.support_))
X_small = X[svm.support_]
y_small = y[svm.support_]

# Train a new SVM using only the support vectors
svm_small = SVC(kernel="linear")
svm_small.fit(X_small , y_small)
plot_classifier(X_small, y_small, svm_small, lims=(11,15,0,6))




<script.py> output:
    Number of original examples 178
    Number of support vectors 81
	
	
Nice! Compare the decision boundaries of the two trained models: are they the same? By the definition of support vectors, they should be!



------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Ref : 
 
 GridSearchCV warm-up
In the video we saw that increasing the RBF kernel hyperparameter gamma increases training accuracy. In this exercise we'll search for the gamma that maximizes cross-validation accuracy using scikit-learn's GridSearchCV. A binary version of the handwritten digits dataset, in which you're just trying to predict whether or not an image is a "2", is already loaded into the variables X and y.


 Q : 
 
 Create a GridSearchCV object.
Call the fit() method to select the best value of gamma based on cross-validation accuracy.


# Instantiate an RBF SVM
svm = SVC()

# Instantiate the GridSearchCV object and run the search
parameters = {'gamma':[0.00001, 0.0001, 0.001, 0.01, 0.1]}
searcher = GridSearchCV(svm, parameters)
searcher.fit(X , y)

# Report the best parameters
print("Best CV params", searcher.best_params_)





<script.py> output:
    Best CV params {'gamma': 0.001}
	
	
	
Great job! Larger values of gamma are better for training accuracy, but cross-validation helped us find something different (and better!).



------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Ref : 
 
 Jointly tuning gamma and C with GridSearchCV
In the previous exercise the best value of gamma was 0.001 using the default value of C, which is 1. In this exercise you'll search for the best combination of C and gamma using GridSearchCV.

As in the previous exercise, the 2-vs-not-2 digits dataset is already loaded, but this time it's split into the variables X_train, y_train, X_test, and y_test. Even though cross-validation already splits the training set into parts, it's often a good idea to hold out a separate test set to make sure the cross-validation results are sensible.


 Q : 
 
 
 
 Run GridSearchCV to find the best hyperparameters using the training set.
Print the best values of the parameters.
Print out the accuracy on the test set, which was not used during the cross-validation procedure.


# Instantiate an RBF SVM
svm = SVC()

# Instantiate the GridSearchCV object and run the search
parameters = {'C':[0.1, 1, 10], 'gamma':[0.00001, 0.0001, 0.001, 0.01, 0.1]}
searcher = GridSearchCV(svm, parameters)
searcher.fit(X_train , y_train )

# Report the best parameters and the corresponding score
print("Best CV params", searcher.best_params_)
print("Best CV accuracy", searcher.best_score_)

# Report the test accuracy using these best parameters
print("Test accuracy of best grid search hypers:", searcher.score(X_test , y_test))




<script.py> output:
    Best CV params {'C': 10, 'gamma': 0.0001}
    Best CV accuracy 0.9988864142538976
    Test accuracy of best grid search hypers: 0.9988876529477196
	
You got it! Note that the best value of gamma, 0.0001, is different from the value of 0.001 that we got in the previous exercise, when we fixed C=1. Hyperparameters can affect each other!



------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Q : 
 
 An advantage of SVMs
Which of the following is an advantage of SVMs over logistic regression?


 A : 
 
 They are computationally efficient with kernels.
press


That's right! Having a limited number of support vectors makes kernel SVMs computationally efficient.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Q : 
 
 An advantage of logistic regression
Which of the following is an advantage of logistic regression over SVMs?


 A : 

 
 
It naturally outputs meaningful probabilities.
press


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Ref : 
 
 Using SGDClassifier
In this final coding exercise, you'll do a hyperparameter search over the regularization type, regularization strength, and the loss (logistic regression vs. linear SVM) using SGDClassifier().


 Q : 
 
 Instantiate an SGDClassifier instance with random_state=0.
Search over the regularization strength, the hinge vs. log losses, and L1 vs. L2 regularization.


# We set random_state=0 for reproducibility 
linear_classifier = SGDClassifier(random_state=0)

# Instantiate the GridSearchCV object and run the search
parameters = {'alpha':[0.00001, 0.0001, 0.001, 0.01, 0.1, 1], 
             'loss':["hinge" , "log"], 'penalty':["l1" , "l2"]}
searcher = GridSearchCV(linear_classifier, parameters, cv=10)
searcher.fit(X_train, y_train)

# Report the best parameters and the corresponding score
print("Best CV params", searcher.best_params_)
print("Best CV accuracy", searcher.best_score_)
print("Test accuracy of best grid search hypers:", searcher.score(X_test, y_test))




<script.py> output:
    Best CV params {'alpha': 0.0001, 'loss': 'hinge', 'penalty': 'l1'}
    Best CV accuracy 0.94351630867144
    Test accuracy of best grid search hypers: 0.9592592592592593
	
	
	
Congrats, you finished the last exercise in the course! One advantage of SGDClassifier is that it's very fast - this would have taken a lot longer with LogisticRegression or LinearSVC.



------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



















































































































