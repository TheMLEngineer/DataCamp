

Ref : 


Making a scatter plot with lists
In this exercise, we'll use a dataset that contains information about 227 countries. This dataset has lots of interesting information on each country, such as the country's birth rates, death rates, and its gross domestic product (GDP). GDP is the value of all the goods and services produced in a year, expressed as dollars per person.

We've created three lists of data from this dataset to get you started. gdp is a list that contains the value of GDP per country, expressed as dollars per person. phones is a list of the number of mobile phones per 1,000 people in that country. Finally, percent_literate is a list that contains the percent of each country's population that can read and write.



 Q : 

Import Matplotlib and Seaborn using the standard naming convention.



# Import Matplotlib and Seaborn

import matplotlib.pyplot as plt
import seaborn as sns



Create a scatter plot of GDP (gdp) vs. number of phones per 1000 people (phones).



# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Create scatter plot with GDP on the x-axis and number of phones on the y-axis
sns.scatterplot(gdp , phones)




Display the plot.



# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Create scatter plot with GDP on the x-axis and number of phones on the y-axis
sns.scatterplot(x=gdp, y=phones)

# Show plot
plt.show()



Change the scatter plot so it displays the percent of the population that can read and write (percent_literate) on the y-axis.



# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Change this scatter plot to have percent literate on the y-axis
sns.scatterplot(x=gdp, y=percent_literate)

# Show plot
plt.show()




Alright! While this plot does not show a linear relationship between GDP and percent literate, countries with a lower GDP do seem more likely to have a lower percent of the population that can read and write.




---------------------------------------------------------------------------------------------------------------------------------------------------------------------




 Ref : 


Making a count plot with a list
In the last exercise, we explored a dataset that contains information about 227 countries. Let's do more exploration of this data - specifically, how many countries are in each region of the world?

To do this, we'll need to use a count plot. Count plots take in a categorical list and return bars that represent the number of list entries per category. You can create one here using a list of regions for each country, which is a variable named region.



 Q : 


Import Matplotlib and Seaborn using the standard naming conventions.
Use Seaborn to create a count plot with region on the y-axis.
Display the plot.




# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Create count plot with region on the y-axis
sns.countplot(y=region)

# Show plot
plt.show()



In [1]: region
Out[1]: 
['ASIA (EX. NEAR EAST)',
 'EASTERN EUROPE',
 'NORTHERN AFRICA',
 'OCEANIA',
 'WESTERN EUROPE',
 'SUB-SAHARAN AFRICA',
 'LATIN AMER. & CARIB',
 'LATIN AMER. & CARIB',
 'LATIN AMER. & CARIB',
 'C.W. OF IND. STATES',
 'LATIN AMER. & CARIB',
 'OCEANIA',
 'WESTERN EUROPE',
 'C.W. OF IND. STATES',
 'LATIN AMER. & CARIB',
 'NEAR EAST',
 'ASIA (EX. NEAR EAST)',
 'LATIN AMER. & CARIB',
 'C.W. OF IND. STATES',
 'WESTERN EUROPE',
 'LATIN AMER. & CARIB',
 'SUB-SAHARAN AFRICA',
 'NORTHERN AMERICA',
 'ASIA (EX. NEAR EAST)',
 'LATIN AMER. & CARIB',
 'EASTERN EUROPE',
 'SUB-SAHARAN AFRICA',
 'LATIN AMER. & CARIB',
 'LATIN AMER. & CARIB',
 'ASIA (EX. NEAR EAST)',
 'EASTERN EUROPE',
 'SUB-SAHARAN AFRICA',
 'ASIA (EX. NEAR EAST)',
 'SUB-SAHARAN AFRICA',
 'ASIA (EX. NEAR EAST)',
 'SUB-SAHARAN AFRICA',
 'NORTHERN AMERICA',
 'SUB-SAHARAN AFRICA',
 'LATIN AMER. & CARIB',
 'SUB-SAHARAN AFRICA',
 'SUB-SAHARAN AFRICA',
 'LATIN AMER. & CARIB',
 'ASIA (EX. NEAR EAST)',
 'LATIN AMER. & CARIB',
 'SUB-SAHARAN AFRICA',
 'SUB-SAHARAN AFRICA',
 'SUB-SAHARAN AFRICA',
 'OCEANIA',
 'LATIN AMER. & CARIB',
 'SUB-SAHARAN AFRICA',
 'EASTERN EUROPE',
 'LATIN AMER. & CARIB',
 'NEAR EAST',
 'EASTERN EUROPE',
 'WESTERN EUROPE',
 'SUB-SAHARAN AFRICA',
 'LATIN AMER. & CARIB',
 'LATIN AMER. & CARIB',
 'ASIA (EX. NEAR EAST)',
 'LATIN AMER. & CARIB',
 'NORTHERN AFRICA',
 'LATIN AMER. & CARIB',
 'SUB-SAHARAN AFRICA',
 'SUB-SAHARAN AFRICA',
 'BALTICS',
 'SUB-SAHARAN AFRICA',
 'WESTERN EUROPE',
 'OCEANIA',
 'WESTERN EUROPE',
 'WESTERN EUROPE',
 'LATIN AMER. & CARIB',
 'OCEANIA',
 'SUB-SAHARAN AFRICA',
 'SUB-SAHARAN AFRICA',
 'NEAR EAST',
 'C.W. OF IND. STATES',
 'WESTERN EUROPE',
 'SUB-SAHARAN AFRICA',
 'WESTERN EUROPE',
 'WESTERN EUROPE',
 'NORTHERN AMERICA',
 'LATIN AMER. & CARIB',
 'LATIN AMER. & CARIB',
 'OCEANIA',
 'LATIN AMER. & CARIB',
 'WESTERN EUROPE',
 'SUB-SAHARAN AFRICA',
 'SUB-SAHARAN AFRICA',
 'LATIN AMER. & CARIB',
 'LATIN AMER. & CARIB',
 'LATIN AMER. & CARIB',
 'ASIA (EX. NEAR EAST)',
 'EASTERN EUROPE',
 'WESTERN EUROPE',
 'ASIA (EX. NEAR EAST)',
 'ASIA (EX. NEAR EAST)',
 'ASIA (EX. NEAR EAST)',
 'NEAR EAST',
 'WESTERN EUROPE',
 'WESTERN EUROPE',
 'NEAR EAST',
 'WESTERN EUROPE',
 'LATIN AMER. & CARIB',
 'ASIA (EX. NEAR EAST)',
 'WESTERN EUROPE',
 'NEAR EAST',
 'C.W. OF IND. STATES',
 'SUB-SAHARAN AFRICA',
 'OCEANIA',
 'ASIA (EX. NEAR EAST)',
 'ASIA (EX. NEAR EAST)',
 'NEAR EAST',
 'C.W. OF IND. STATES',
 'ASIA (EX. NEAR EAST)',
 'BALTICS',
 'NEAR EAST',
 'SUB-SAHARAN AFRICA',
 'SUB-SAHARAN AFRICA',
 'NORTHERN AFRICA',
 'WESTERN EUROPE',
 'BALTICS',
 'WESTERN EUROPE',
 'ASIA (EX. NEAR EAST)',
 'EASTERN EUROPE',
 'SUB-SAHARAN AFRICA',
 'SUB-SAHARAN AFRICA',
 'ASIA (EX. NEAR EAST)',
 'ASIA (EX. NEAR EAST)',
 'SUB-SAHARAN AFRICA',
 'WESTERN EUROPE',
 'OCEANIA',
 'LATIN AMER. & CARIB',
 'SUB-SAHARAN AFRICA',
 'SUB-SAHARAN AFRICA',
 'SUB-SAHARAN AFRICA',
 'LATIN AMER. & CARIB',
 'OCEANIA',
 'C.W. OF IND. STATES',
 'WESTERN EUROPE',
 'ASIA (EX. NEAR EAST)',
 'LATIN AMER. & CARIB',
 'NORTHERN AFRICA',
 'SUB-SAHARAN AFRICA',
 'SUB-SAHARAN AFRICA',
 'OCEANIA',
 'ASIA (EX. NEAR EAST)',
 'WESTERN EUROPE',
 'LATIN AMER. & CARIB',
 'OCEANIA',
 'OCEANIA',
 'LATIN AMER. & CARIB',
 'SUB-SAHARAN AFRICA',
 'SUB-SAHARAN AFRICA',
 'OCEANIA',
 'WESTERN EUROPE',
 'NEAR EAST',
 'ASIA (EX. NEAR EAST)',
 'OCEANIA',
 'LATIN AMER. & CARIB',
 'OCEANIA',
 'LATIN AMER. & CARIB',
 'LATIN AMER. & CARIB',
 'ASIA (EX. NEAR EAST)',
 'EASTERN EUROPE',
 'WESTERN EUROPE',
 'LATIN AMER. & CARIB',
 'NEAR EAST',
 'SUB-SAHARAN AFRICA',
 'EASTERN EUROPE',
 'C.W. OF IND. STATES',
 'SUB-SAHARAN AFRICA',
 'SUB-SAHARAN AFRICA',
 'LATIN AMER. & CARIB',
 'LATIN AMER. & CARIB',
 'NORTHERN AMERICA',
 'LATIN AMER. & CARIB',
 'OCEANIA',
 'WESTERN EUROPE',
 'SUB-SAHARAN AFRICA',
 'NEAR EAST',
 'SUB-SAHARAN AFRICA',
 'EASTERN EUROPE',
 'SUB-SAHARAN AFRICA',
 'SUB-SAHARAN AFRICA',
 'ASIA (EX. NEAR EAST)',
 'EASTERN EUROPE',
 'EASTERN EUROPE',
 'OCEANIA',
 'SUB-SAHARAN AFRICA',
 'SUB-SAHARAN AFRICA',
 'WESTERN EUROPE',
 'ASIA (EX. NEAR EAST)',
 'SUB-SAHARAN AFRICA',
 'LATIN AMER. & CARIB',
 'SUB-SAHARAN AFRICA',
 'WESTERN EUROPE',
 'WESTERN EUROPE',
 'NEAR EAST',
 'ASIA (EX. NEAR EAST)',
 'C.W. OF IND. STATES',
 'SUB-SAHARAN AFRICA',
 'ASIA (EX. NEAR EAST)',
 'SUB-SAHARAN AFRICA',
 'OCEANIA',
 'LATIN AMER. & CARIB',
 'NORTHERN AFRICA',
 'NEAR EAST',
 'C.W. OF IND. STATES',
 'LATIN AMER. & CARIB',
 'OCEANIA',
 'SUB-SAHARAN AFRICA',
 'C.W. OF IND. STATES',
 'NEAR EAST',
 'WESTERN EUROPE',
 'NORTHERN AMERICA',
 'LATIN AMER. & CARIB',
 'C.W. OF IND. STATES',
 'OCEANIA',
 'LATIN AMER. & CARIB',
 'ASIA (EX. NEAR EAST)',
 'LATIN AMER. & CARIB',
 'OCEANIA',
 'NEAR EAST',
 'NORTHERN AFRICA',
 'NEAR EAST',
 'SUB-SAHARAN AFRICA',
 'SUB-SAHARAN AFRICA']




Great job! Sub-Saharan Africa contains the most countries in this list. We'll revisit count plots later in the course.





---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 


"Tidy" vs. "untidy" data
Here, we have a sample dataset from a survey of children about their favorite animals. But can we use this dataset as-is with Seaborn? Let's use Pandas to import the csv file with the data collected from the survey and determine whether it is tidy, which is essential to having it work well with Seaborn.

To get you started, the filepath to the csv file has been assigned to the variable csv_filepath.




 Q : 


Read the csv file located at csv_filepath into a DataFrame named df.
Print the head of df to show the first five rows.




# Import Pandas
import pandas as pd

# Create a DataFrame from csv file
df = pd.read_csv(csv_filepath)

# Print the head of df
print(df.head())



View the first five rows of the DataFrame df. Is it tidy? Why or why not?




<script.py> output:
      Unnamed: 0               How old are you?
    0     Marion                             12
    1      Elroy                             16
    2        NaN  What is your favorite animal?
    3     Marion                            dog
    4      Elroy                            cat



 A : 


No, because a single column contains different types of information.


Good job. Always make sure to check if your DataFrame is tidy before using it with Seaborn.



---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 




Making a count plot with a DataFrame
In this exercise, we'll look at the responses to a survey sent out to young people. Our primary question here is: how many young people surveyed report being scared of spiders? Survey participants were asked to agree or disagree with the statement "I am afraid of spiders". Responses vary from 1 to 5, where 1 is "Strongly disagree" and 5 is "Strongly agree".

The survey data is in a csv file located at csv_filepath.





 Q : 



Import Matplotlib, Pandas, and Seaborn using the standard names.
Create a DataFrame named df from the csv file located at csv_filepath.
Create a count plot with the "Spiders" column values on the x-axis.
Display the plot.




# Import Matplotlib, Pandas, and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Create a DataFrame from csv file
df = pd.read_csv(csv_filepath)

# Create a count plot with "Spiders" on the x-axis
sns.countplot(x = 'Spiders' , data = df)

# Display the plot
plt.show()





Awesome! This plot shows us that most young people reported not being afraid of spiders.






---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 


Hue and scatter plots
In the prior video, we learned how hue allows us to easily make subgroups within Seaborn plots. Let's try it out by exploring data from students in secondary school. We have a lot of information about each student like their age, where they live, their study habits and their extracurricular activities.

For now, we'll look at the relationship between the number of absences they have in school and their final grade in the course, segmented by where the student lives (rural vs. urban area).




 Q : 


Create a scatter plot with "absences" on the x-axis and final grade ("G3") on the y-axis using the DataFrame student_data. Color the plot points based on "location" (urban vs. rural).




# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Create a scatter plot of absences vs. final grade
sns.scatterplot(x = 'absences' , y = 'G3' , data = student_data , hue = 'location')



# Show plot
plt.show()



Make "Rural" appear before "Urban" in the plot legend.




# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Change the legend order in the scatter plot
sns.scatterplot(x="absences", y="G3", 
                data=student_data, 
                hue="location" , hue_order = ['Rural' , 'Urban'])

# Show plot
plt.show()




Well done! It looks like students with higher absenses tend to have lower grades in both rural and urban areas.



---------------------------------------------------------------------------------------------------------------------------------------------------------------------




 Ref : 



Hue and count plots
Let's continue exploring our dataset from students in secondary school by looking at a new variable. The "school" column indicates the initials of which school the student attended - either "GP" or "MS".

In the last exercise, we created a scatter plot where the plot points were colored based on whether the student lived in an urban or rural area. How many students live in urban vs. rural areas, and does this vary based on what school the student attends? Let's make a count plot with subgroups to find out.






 Q : 


Fill in the palette_colors dictionary to map the "Rural" location value to the color "green" and the "Urban" location value to the color "blue".
Create a count plot with "school" on the x-axis using the student_data DataFrame.
Add subgroups to the plot using "location" variable.
Use the palette_colors dictionary to make the location subgroups green and blue.






# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Create a dictionary mapping subgroup values to colors
palette_colors = {'Rural': "green", 'Urban': "blue"}

# Create a count plot of school with location subgroups
sns.countplot("school" , data = student_data , hue = 'location' , palette = palette_colors)




# Display plot
plt.show()




Awesome. Students at GP tend to come from an urban location, but students at MS are more evenly split. Congratulations on finishing Chapter 1!





---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 



Creating subplots with col and row
We've seen in prior exercises that students with more absences ("absences") tend to have lower final grades ("G3"). Does this relationship hold regardless of how much time students study each week?

To answer this, we'll look at the relationship between the number of absences that a student has in school and their final grade in the course, creating separate subplots based on each student's weekly study time ("study_time").

Seaborn has been imported as sns and matplotlib.pyplot has been imported as plt.




 Q : 


Modify the code to use relplot() instead of scatterplot().





# Change to use relplot() instead of scatterplot()
sns.relplot(x="absences", y="G3", 
                data=student_data , kind = 'scatter')

# Show plot
plt.show()




Modify the code to create one scatter plot for each level of the variable "study_time", arranged in columns.



# Change to make subplots based on study time
sns.relplot(x="absences", y="G3", 
            data=student_data, 
            kind="scatter" , col = 'study_time')

# Show plot
plt.show()




Adapt your code to create one scatter plot for each level of a student's weekly study time, this time arranged in rows.




# Change this scatter plot to arrange the plots in rows instead of columns
sns.relplot(x="absences", y="G3", 
            data=student_data,
            kind="scatter", 
            row="study_time")

# Show plot
plt.show()



Great job! Because these subplots had a large range of x values, it's easier to read them arranged in rows instead of columns.





---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 


Creating two-factor subplots
Let's continue looking at the student_data dataset of students in secondary school. Here, we want to answer the following question: does a student's first semester grade ("G1") tend to correlate with their final grade ("G3")?

There are many aspects of a student's life that could result in a higher or lower final grade in the class. For example, some students receive extra educational support from their school ("schoolsup") or from their family ("famsup"), which could result in higher grades. Let's try to control for these two factors by creating subplots based on whether the student received extra educational support from their school or family.

Seaborn has been imported as sns and matplotlib.pyplot has been imported as plt.




 Q : 



Use relplot() to create a scatter plot with "G1" on the x-axis and "G3" on the y-axis, using the student_data DataFrame.




# Create a scatter plot of G1 vs. G3

sns.relplot('G1' , 'G3' , data = student_data , kind = 'scatter')


# Show plot
plt.show()






Create column subplots based on whether the student received support from the school ("schoolsup"), ordered so that "yes" comes before "no".




# Adjust to add subplots based on school support
sns.relplot(x="G1", y="G3", 
            data=student_data,
            kind="scatter" , col_order = ['yes','no'] , col = 'schoolsup')

# Show plot
plt.show()




Add row subplots based on whether the student received support from the family ("famsup"), ordered so that "yes" comes before "no". This will result in subplots based on two factors.




# Adjust further to add subplots based on family support
sns.relplot(x="G1", y="G3", 
            data=student_data,
            kind="scatter", 
            col="schoolsup",
            row = 'famsup',
            col_order=["yes", "no"],
            row_order = ['yes' , 'no'])

# Show plot
plt.show()



Fantastic! It looks like the first semester grade does correlate with the final grade, regardless of what kind of support the student received.





---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 


Changing the size of scatter plot points
In this exercise, we'll explore Seaborn's mpg dataset, which contains one row per car model and includes information such as the year the car was made, the number of miles per gallon ("M.P.G.") it achieves, the power of its engine (measured in "horsepower"), and its country of origin.

What is the relationship between the power of a car's engine ("horsepower") and its fuel efficiency ("mpg")? And how does this relationship vary by the number of cylinders ("cylinders") the car has? Let's find out.

Let's continue to use relplot() instead of scatterplot() since it offers more flexibility.




 Q : 


Use relplot() and the mpg DataFrame to create a scatter plot with "horsepower" on the x-axis and "mpg" on the y-axis. Vary the size of the points by the number of cylinders in the car ("cylinders").




# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Create scatter plot of horsepower vs. mpg
sns.relplot('horsepower' , 'mpg' , data = mpg , size = 'cylinders' , kind = 'scatter')



# Show plot
plt.show()




To make this plot easier to read, use hue to vary the color of the points by the number of cylinders in the car ("cylinders").





# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Create scatter plot of horsepower vs. mpg
sns.relplot(x="horsepower", y="mpg", 
            data=mpg, kind="scatter", hue = 'cylinders' ,
            size="cylinders")

# Show plot
plt.show()



Great job! Cars with higher horsepower tend to get a lower number of miles per gallon. They also tend to have a higher number of cylinders.






---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 


Changing the style of scatter plot points
Let's continue exploring Seaborn's mpg dataset by looking at the relationship between how fast a car can accelerate ("acceleration") and its fuel efficiency ("mpg"). Do these properties vary by country of origin ("origin")?

Note that the "acceleration" variable is the time to accelerate from 0 to 60 miles per hour, in seconds. Higher values indicate slower acceleration.



 Q : 

Use relplot() and the mpg DataFrame to create a scatter plot with "acceleration" on the x-axis and "mpg" on the y-axis. Vary the style and color of the plot points by country of origin ("origin").





# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Create a scatter plot of acceleration vs. mpg

sns.relplot('acceleration' , 'mpg' , data = mpg , hue = 'origin' , style = 'origin' , kind = 'scatter')



# Show plot
plt.show()




Looks good! Cars from the USA tend to accelerate more quickly and get lower miles per gallon compared to cars from Europe and Japan.





---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 


Interpreting line plots
In this exercise, we'll continue to explore Seaborn's mpg dataset, which contains one row per car model and includes information such as the year the car was made, its fuel efficiency (measured in "miles per gallon" or "M.P.G"), and its country of origin (USA, Europe, or Japan).

How has the average miles per gallon achieved by these cars changed over time? Let's use line plots to find out!




 Q : 

Use relplot() and the mpg DataFrame to create a line plot with "model_year" on the x-axis and "mpg" on the y-axis.




# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Create line plot
sns.relplot('model_year' , 'mpg' , data = mpg , kind = 'line')


# Show plot
plt.show()




Which of the following is NOT a correct interpretation of this line plot?



The distribution of miles per gallon is smaller in 1973 compared to 1977.




Good job. The shaded region represents a confidence interval for the mean, not the distribution of the observations.




---------------------------------------------------------------------------------------------------------------------------------------------------------------------



 Ref  :


Visualizing standard deviation with line plots
In the last exercise, we looked at how the average miles per gallon achieved by cars has changed over time. Now let's use a line plot to visualize how the distribution of miles per gallon has changed over time.

Seaborn has been imported as sns and matplotlib.pyplot has been imported as plt.



 Q : 


Change the plot so the shaded area shows the standard deviation instead of the confidence interval for the mean.



# Make the shaded area show the standard deviation
sns.relplot(x="model_year", y="mpg",
            data=mpg, kind="line" , ci = 'sd')

# Show plot
plt.show()



Excellent. Unlike the plot in the last exercise, this plot shows us the distribution of miles per gallon for all the cars in each year.




---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 


Plotting subgroups in line plots
Let's continue to look at the mpg dataset. We've seen that the average miles per gallon for cars has increased over time, but how has the average horsepower for cars changed over time? And does this trend differ by country of origin?


 Q : 


Use relplot() and the mpg DataFrame to create a line plot with "model_year" on the x-axis and "horsepower" on the y-axis. Turn off the confidence intervals on the plot.



# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Create line plot of model year vs. horsepower

sns.relplot(
    'model_year' , 'horsepower' , ci = None , kind = 'line' , data = mpg
    )


# Show plot
plt.show()




Create different lines for each country of origin ("origin") that vary in both line style and color.



# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Change to create subgroups for country of origin
sns.relplot(x="model_year", y="horsepower", 
            data=mpg, kind="line", 
            ci=None , style = 'origin')

# Show plot
plt.show()



Add markers for each data point to the lines.
Make the line styles the same for each country.



# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Add markers and make each line have the same style
sns.relplot(x="model_year", y="horsepower", 
            data=mpg, kind="line", 
            ci=None, style="origin", 
            hue="origin" , marker = True)

# Show plot
plt.show()



Nice work! Now that we've added subgroups, we can see that this downward trend in horsepower was more pronounced among cars from the USA.





---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 


Count plots
In this exercise, we'll return to exploring our dataset that contains the responses to a survey sent out to young people. We might suspect that young people spend a lot of time on the internet, but how much do they report using the internet each day? Let's use a count plot to break down the number of survey responses in each category and then explore whether it changes based on age.

As a reminder, to create a count plot, we'll use the catplot() function and specify the name of the categorical variable to count (x=____), the Pandas DataFrame to use (data=____), and the type of plot (kind="count").

Seaborn has been imported as sns and matplotlib.pyplot has been imported as plt.



 Q : 


Use sns.catplot() to create a count plot using the survey_data DataFrame with "Internet usage" on the x-axis.




# Create count plot of internet usage

sns.catplot(
    'Internet usage' , data = survey_data , kind = 'count'
    )

# Show plot
plt.show()




Make the bars horizontal instead of vertical.


# Change the orientation of the plot
sns.catplot(y="Internet usage", data=survey_data,
            kind="count")

# Show plot
plt.show()




Create column subplots based on "Age Category", which separates respondents into those that are younger than 21 vs. 21 and older.



# Create column subplots based on age category
sns.catplot(y="Internet usage", data=survey_data, col='Age Category',
            kind="count")

# Show plot
plt.show()



Great job! It looks like most young people use the internet for a few hours every day, regardless of their age.





---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 



Bar plots with percentages
Let's continue exploring the responses to a survey sent out to young people. The variable "Interested in Math" is True if the person reported being interested or very interested in mathematics, and False otherwise. What percentage of young people report being interested in math, and does this vary based on gender? Let's use a bar plot to find out.

As a reminder, we'll create a bar plot using the catplot() function, providing the name of categorical variable to put on the x-axis (x=____), the name of the quantitative variable to summarize on the y-axis (y=____), the Pandas DataFrame to use (data=____), and the type of categorical plot (kind="bar").

Seaborn has been imported as sns and matplotlib.pyplot has been imported as plt.







 Q : 



Use the survey_data DataFrame and sns.catplot() to create a bar plot with "Gender" on the x-axis and "Interested in Math" on the y-axis.





# Create a bar plot of interest in math, separated by gender
sns.catplot(
    'Gender' , "Interested in Math" , kind = 'bar' , data = survey_data
    )


# Show plot
plt.show()


Excellent. When the y-variable is True/False, bar plots will show the percentage of responses reporting True. This plot shows us that males report a much higher interest in math compared to females.




---------------------------------------------------------------------------------------------------------------------------------------------------------------------



 Ref : 


Customizing bar plots
In this exercise, we'll explore data from students in secondary school. The "study_time" variable records each student's reported weekly study time as one of the following categories: "<2 hours", "2 to 5 hours", "5 to 10 hours", or ">10 hours". Do students who report higher amounts of studying tend to get better final grades? Let's compare the average final grade among students in each category using a bar plot.

Seaborn has been imported as sns and matplotlib.pyplot has been imported as plt.



 Q : 


Use sns.catplot() to create a bar plot with "study_time" on the x-axis and final grade ("G3") on the y-axis, using the student_data DataFrame.





# Create bar plot of average final grade in each study category
sns.catplot(
    'study_time' , 'G3' , data = student_data , kind = 'bar'
    )



# Show plot
plt.show()




Using the order parameter, rearrange the categories so that they are in order from lowest study time to highest.




# Rearrange the categories
sns.catplot(x="study_time", y="G3",
            data=student_data,
            kind="bar" , order = ["<2 hours", "2 to 5 hours", "5 to 10 hours", ">10 hours"])

# Show plot
plt.show()



Update the plot so that it no longer displays confidence intervals.



# Turn off the confidence intervals
sns.catplot(x="study_time", y="G3",
            data=student_data,
            kind="bar",
            order=["<2 hours", 
                   "2 to 5 hours", 
                   "5 to 10 hours", 
                   ">10 hours"] , ci = None)

# Show plot
plt.show()




Great work! Students in our sample who studied more have a slightly higher average grade, but it's not a strong relationship.




---------------------------------------------------------------------------------------------------------------------------------------------------------------------



 Ref : 



Create and interpret a box plot
Let's continue using the student_data dataset. In an earlier exercise, we explored the relationship between studying and final grade by using a bar plot to compare the average final grade ("G3") among students in different categories of "study_time".

In this exercise, we'll try using a box plot look at this relationship instead. As a reminder, to create a box plot you'll need to use the catplot() function and specify the name of the categorical variable to put on the x-axis (x=____), the name of the quantitative variable to summarize on the y-axis (y=____), the Pandas DataFrame to use (data=____), and the type of plot (kind="box").

We have already imported matplotlib.pyplot as plt and seaborn as sns.





 Q : 


Use sns.catplot() and the student_data DataFrame to create a box plot with "study_time" on the x-axis and "G3" on the y-axis. Set the ordering of the categories to study_time_order.




# Specify the category ordering
study_time_order = ["<2 hours", "2 to 5 hours", 
                    "5 to 10 hours", ">10 hours"]

# Create a box plot and set the order of the categories

sns.catplot(
    'study_time' , 'G3' , data = student_data , order = study_time_order , kind = 'box'
    )



# Show plot
plt.show()




Which of the following is a correct interpretation of this box plot?




The median grade among students studying less than 2 hours is 10.0.




Correct! The line in the middle of each box represents the median.



---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 


Omitting outliers
Now let's use the student_data dataset to compare the distribution of final grades ("G3") between students who have internet access at home and those who don't. To do this, we'll use the "internet" variable, which is a binary (yes/no) indicator of whether the student has internet access at home.

Since internet may be less accessible in rural areas, we'll add subgroups based on where the student lives. For this, we can use the "location" variable, which is an indicator of whether a student lives in an urban ("Urban") or rural ("Rural") location.

Seaborn has already been imported as sns and matplotlib.pyplot has been imported as plt. As a reminder, you can omit outliers in box plots by setting the sym parameter equal to an empty string ("").





 Q : 


Use sns.catplot() to create a box plot with the student_data DataFrame, putting "internet" on the x-axis and "G3" on the y-axis.
Add subgroups so each box plot is colored based on "location".
Do not display the outliers.




# Create a box plot with subgroups and omit the outliers

sns.catplot('internet' , 'G3' , data = student_data , kind = 'box' , hue = 'location' , whis = [0,100] , sym = '')




# Show plot
plt.show()




Success! The median grades are quite similar between each group, but the spread of the distribution looks larger among students who have internet access.




---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 


Adjusting the whiskers
In the lesson we saw that there are multiple ways to define the whiskers in a box plot. In this set of exercises, we'll continue to use the student_data dataset to compare the distribution of final grades ("G3") between students who are in a romantic relationship and those that are not. We'll use the "romantic" variable, which is a yes/no indicator of whether the student is in a romantic relationship.

Let's create a box plot to look at this relationship and try different ways to define the whiskers.

We've already imported Seaborn as sns and matplotlib.pyplot as plt.




 Q : 


Adjust the code to make the box plot whiskers to extend to 0.5 * IQR. Recall: the IQR is the interquartile range.




# Set the whiskers to 0.5 * IQR
sns.catplot(x="romantic", y="G3",
            data=student_data,
            kind="box" , whis = [25 , 75])

# Show plot
plt.show()




Change the code to set the whiskers to extend to the 5th and 95th percentiles.




# Extend the whiskers to the 5th and 95th percentile
sns.catplot(x="romantic", y="G3",
            data=student_data,
            kind="box",
            whis=[5,95])

# Show plot
plt.show()




Change the code to set the whiskers to extend to the min and max values.




# Set the whiskers at the min and max values
sns.catplot(x="romantic", y="G3",
            data=student_data,
            kind="box",
            whis=[0,100])

# Show plot
plt.show()




Fantastic! The median grade is the same between these two groups, but the max grade is higher among students who are not in a romantic relationship.




---------------------------------------------------------------------------------------------------------------------------------------------------------------------





 Ref : 


Customizing point plots
Let's continue to look at data from students in secondary school, this time using a point plot to answer the question: does the quality of the student's family relationship influence the number of absences the student has in school? Here, we'll use the "famrel" variable, which describes the quality of a student's family relationship from 1 (very bad) to 5 (very good).

As a reminder, to create a point plot, use the catplot() function and specify the name of the categorical variable to put on the x-axis (x=____), the name of the quantitative variable to summarize on the y-axis (y=____), the Pandas DataFrame to use (data=____), and the type of categorical plot (kind="point").

We've already imported Seaborn as sns and matplotlib.pyplot as plt.



 Q : 


Use sns.catplot() and the student_data DataFrame to create a point plot with "famrel" on the x-axis and number of absences ("absences") on the y-axis.



# Create a point plot of family relationship vs. absences

sns.catplot( 'famrel' ,'absences', data = student_data , kind = 'point' )

            
# Show plot
plt.show()



Add "caps" to the end of the confidence intervals with size 0.2.



# Add caps to the confidence interval
sns.catplot(x="famrel", y="absences",
			data=student_data,
            kind="point" , capsize = 0.2)
        
# Show plot
plt.show()




Remove the lines joining the points in each category.




# Remove the lines joining the points
sns.catplot(x="famrel", y="absences",
			data=student_data,
            kind="point",
            capsize=0.2 , join = False)
            
# Show plot
plt.show()



Awesome! While the average number of absences is slightly smaller among students with higher-quality family relationships, the large confidence intervals tell us that we can't be sure there is an actual association here.






---------------------------------------------------------------------------------------------------------------------------------------------------------------------


 Ref : 


Point plots with subgroups
Let's continue exploring the dataset of students in secondary school. This time, we'll ask the question: is being in a romantic relationship associated with higher or lower school attendance? And does this association differ by which school the students attend? Let's find out using a point plot.

We've already imported Seaborn as sns and matplotlib.pyplot as plt.




 Q : 



Use sns.catplot() and the student_data DataFrame to create a point plot with relationship status ("romantic") on the x-axis and number of absences ("absences") on the y-axis. Create subgroups based on the school that they attend ("school")




# Create a point plot with subgroups
sns.catplot(
    
    'romantic' , 'absences' , hue = 'school' , data = student_data , kind = 'point'
    
    )



# Show plot
plt.show()




Turn off the confidence intervals for the plot.



# Turn off the confidence intervals for this plot
sns.catplot(x="romantic", y="absences",
			data=student_data,
            kind="point",
            hue="school" , ci = None)

# Show plot
plt.show()



Since there may be outliers of students with many absences, import the median function from numpy and display the median number of absences instead of the average.



# Import median function from numpy
from numpy import median

# Plot the median number of absences instead of the mean
sns.catplot(x="romantic", y="absences",
			data=student_data,
            kind="point",
            hue="school",
            ci=None , estimator = median)

# Show plot
plt.show()




Good work! It looks like students in romantic relationships have a higher average and median number of absences in the GP school, but this association does not hold for the MS school.





---------------------------------------------------------------------------------------------------------------------------------------------------------------------




















































